
uart_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a4  080027a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000012c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000071b6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019c2  00000000  00000000  000271f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  00028bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000680  00000000  00000000  00029310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002175c  00000000  00000000  00029990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007bd6  00000000  00000000  0004b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c70e4  00000000  00000000  00052cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00119da6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c4c  00000000  00000000  00119dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002760 	.word	0x08002760

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002760 	.word	0x08002760

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <__NVIC_GetPriorityGrouping+0x18>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	0a1b      	lsrs	r3, r3, #8
 80004da:	f003 0307 	and.w	r3, r3, #7
}
 80004de:	4618      	mov	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db0b      	blt.n	8000516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 021f 	and.w	r2, r3, #31
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <__NVIC_EnableIRQ+0x38>)
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	095b      	lsrs	r3, r3, #5
 800050c:	2001      	movs	r0, #1
 800050e:	fa00 f202 	lsl.w	r2, r0, r2
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000e100 	.word	0xe000e100

08000528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	db0a      	blt.n	8000552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	b2da      	uxtb	r2, r3
 8000540:	490c      	ldr	r1, [pc, #48]	; (8000574 <__NVIC_SetPriority+0x4c>)
 8000542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000546:	0112      	lsls	r2, r2, #4
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	440b      	add	r3, r1
 800054c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000550:	e00a      	b.n	8000568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4908      	ldr	r1, [pc, #32]	; (8000578 <__NVIC_SetPriority+0x50>)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	f003 030f 	and.w	r3, r3, #15
 800055e:	3b04      	subs	r3, #4
 8000560:	0112      	lsls	r2, r2, #4
 8000562:	b2d2      	uxtb	r2, r2
 8000564:	440b      	add	r3, r1
 8000566:	761a      	strb	r2, [r3, #24]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e000e100 	.word	0xe000e100
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800057c:	b480      	push	{r7}
 800057e:	b089      	sub	sp, #36	; 0x24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	f1c3 0307 	rsb	r3, r3, #7
 8000596:	2b04      	cmp	r3, #4
 8000598:	bf28      	it	cs
 800059a:	2304      	movcs	r3, #4
 800059c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3304      	adds	r3, #4
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d902      	bls.n	80005ac <NVIC_EncodePriority+0x30>
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3b03      	subs	r3, #3
 80005aa:	e000      	b.n	80005ae <NVIC_EncodePriority+0x32>
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	f04f 32ff 	mov.w	r2, #4294967295
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	43da      	mvns	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	401a      	ands	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c4:	f04f 31ff 	mov.w	r1, #4294967295
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	43d9      	mvns	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	4313      	orrs	r3, r2
         );
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3724      	adds	r7, #36	; 0x24
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4013      	ands	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40023800 	.word	0x40023800

08000614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000618:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800061c:	f7ff ffe2 	bl	80005e4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000620:	f7ff ff56 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 8000624:	4603      	mov	r3, r0
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffa6 	bl	800057c <NVIC_EncodePriority>
 8000630:	4603      	mov	r3, r0
 8000632:	4619      	mov	r1, r3
 8000634:	2011      	movs	r0, #17
 8000636:	f7ff ff77 	bl	8000528 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800063a:	2011      	movs	r0, #17
 800063c:	f7ff ff56 	bl	80004ec <__NVIC_EnableIRQ>

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_GPIO_Init+0x30>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <MX_GPIO_Init+0x30>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_GPIO_Init+0x30>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fdce 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f80a 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f7ff ffde 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000688:	f000 fcbe 	bl	8001008 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800068c:	f7ff ffc2 	bl	8000614 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  UART_Test();
 8000690:	f000 fd86 	bl	80011a0 <UART_Test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x1c>
	...

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f852 	bl	8002750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xb4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xb4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xb4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <SystemClock_Config+0xb8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <SystemClock_Config+0xb8>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <SystemClock_Config+0xb8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fedf 	bl	80014cc <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000714:	f000 f81e 	bl	8000754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f942 	bl	80019bc <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073e:	f000 f809 	bl	8000754 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <HAL_MspInit+0x4c>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000774:	6453      	str	r3, [r2, #68]	; 0x44
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_MspInit+0x4c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	2b20      	cmp	r3, #32
 80007c2:	bf0c      	ite	eq
 80007c4:	2301      	moveq	r3, #1
 80007c6:	2300      	movne	r3, #0
 80007c8:	b2db      	uxtb	r3, r3
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	2b80      	cmp	r3, #128	; 0x80
 80007e8:	bf0c      	ite	eq
 80007ea:	2301      	moveq	r3, #1
 80007ec:	2300      	movne	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f06f 0220 	mvn.w	r2, #32
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	330c      	adds	r3, #12
 8000824:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	e853 3f00 	ldrex	r3, [r3]
 800082c:	60bb      	str	r3, [r7, #8]
   return(result);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	330c      	adds	r3, #12
 800083a:	69fa      	ldr	r2, [r7, #28]
 800083c:	61ba      	str	r2, [r7, #24]
 800083e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000840:	6979      	ldr	r1, [r7, #20]
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	e841 2300 	strex	r3, r2, [r1]
 8000848:	613b      	str	r3, [r7, #16]
   return(result);
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1e7      	bne.n	8000820 <LL_USART_DisableIT_TXE+0x8>
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	3724      	adds	r7, #36	; 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	b2db      	uxtb	r3, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000884:	78fa      	ldrb	r2, [r7, #3]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	605a      	str	r2, [r3, #4]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089a:	e7fe      	b.n	800089a <NMI_Handler+0x4>

0800089c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <HardFault_Handler+0x4>

080008a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <MemManage_Handler+0x4>

080008a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <BusFault_Handler+0x4>

080008ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <UsageFault_Handler+0x4>

080008b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e2:	f000 fced 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}

080008ea <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  asm("NOP");
 80008ee:	bf00      	nop
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008fc:	b598      	push	{r3, r4, r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* Check flag TXE */


  if ( LL_USART_IsActiveFlag_TXE(USART2) )
 8000900:	481f      	ldr	r0, [pc, #124]	; (8000980 <USART2_IRQHandler+0x84>)
 8000902:	f7ff ff68 	bl	80007d6 <LL_USART_IsActiveFlag_TXE>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d01a      	beq.n	8000942 <USART2_IRQHandler+0x46>
  {
	  if (txIndex < uartSendPtr)
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <USART2_IRQHandler+0x88>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <USART2_IRQHandler+0x8c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	d20b      	bcs.n	8000930 <USART2_IRQHandler+0x34>
	  {
		  LL_USART_TransmitData8(USART2, uartSendBuf[txIndex++]);
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <USART2_IRQHandler+0x88>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	4919      	ldr	r1, [pc, #100]	; (8000984 <USART2_IRQHandler+0x88>)
 8000920:	600a      	str	r2, [r1, #0]
 8000922:	4a1a      	ldr	r2, [pc, #104]	; (800098c <USART2_IRQHandler+0x90>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	4619      	mov	r1, r3
 8000928:	4815      	ldr	r0, [pc, #84]	; (8000980 <USART2_IRQHandler+0x84>)
 800092a:	f7ff ffa5 	bl	8000878 <LL_USART_TransmitData8>
 800092e:	e008      	b.n	8000942 <USART2_IRQHandler+0x46>
	  } else {
		  LL_USART_DisableIT_TXE(USART2);
 8000930:	4813      	ldr	r0, [pc, #76]	; (8000980 <USART2_IRQHandler+0x84>)
 8000932:	f7ff ff71 	bl	8000818 <LL_USART_DisableIT_TXE>
		  txIndex = 0;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <USART2_IRQHandler+0x88>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
		  uartSendPtr = 0;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <USART2_IRQHandler+0x8c>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
	  }
  }

  if ( LL_USART_IsActiveFlag_RXNE(USART2) )
 8000942:	480f      	ldr	r0, [pc, #60]	; (8000980 <USART2_IRQHandler+0x84>)
 8000944:	f7ff ff34 	bl	80007b0 <LL_USART_IsActiveFlag_RXNE>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d015      	beq.n	800097a <USART2_IRQHandler+0x7e>
  {
	  LL_USART_ClearFlag_RXNE(USART2);
 800094e:	480c      	ldr	r0, [pc, #48]	; (8000980 <USART2_IRQHandler+0x84>)
 8000950:	f7ff ff54 	bl	80007fc <LL_USART_ClearFlag_RXNE>
	  if ( rxIndex >= UART_RX_MAX_BYTES)
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <USART2_IRQHandler+0x94>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b7f      	cmp	r3, #127	; 0x7f
 800095a:	d902      	bls.n	8000962 <USART2_IRQHandler+0x66>
	  {
		  rxIndex = 0;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <USART2_IRQHandler+0x94>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
	  }
	  uartRecvBuf[rxIndex++] = LL_USART_ReceiveData8(USART2);
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <USART2_IRQHandler+0x94>)
 8000964:	681c      	ldr	r4, [r3, #0]
 8000966:	1c63      	adds	r3, r4, #1
 8000968:	4a09      	ldr	r2, [pc, #36]	; (8000990 <USART2_IRQHandler+0x94>)
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <USART2_IRQHandler+0x84>)
 800096e:	f7ff ff76 	bl	800085e <LL_USART_ReceiveData8>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <USART2_IRQHandler+0x98>)
 8000978:	551a      	strb	r2, [r3, r4]
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd98      	pop	{r3, r4, r7, pc}
 800097e:	bf00      	nop
 8000980:	40004400 	.word	0x40004400
 8000984:	20000028 	.word	0x20000028
 8000988:	20000130 	.word	0x20000130
 800098c:	200000b0 	.word	0x200000b0
 8000990:	200000ac 	.word	0x200000ac
 8000994:	2000002c 	.word	0x2000002c

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <__NVIC_EnableIRQ+0x38>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000ada:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <LL_DMA_EnableStream+0x3c>)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <LL_DMA_EnableStream+0x3c>)
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	440a      	add	r2, r1
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	4611      	mov	r1, r2
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	440a      	add	r2, r1
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6013      	str	r3, [r2, #0]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	0800279c 	.word	0x0800279c

08000b10 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <LL_DMA_DisableStream+0x3c>)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <LL_DMA_DisableStream+0x3c>)
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	440a      	add	r2, r1
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	4611      	mov	r1, r2
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	440a      	add	r2, r1
 8000b38:	f023 0301 	bic.w	r3, r3, #1
 8000b3c:	6013      	str	r3, [r2, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	0800279c 	.word	0x0800279c

08000b50 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LL_DMA_SetDataTransferDirection+0x44>)
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	4413      	add	r3, r2
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000b70:	4908      	ldr	r1, [pc, #32]	; (8000b94 <LL_DMA_SetDataTransferDirection+0x44>)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	440b      	add	r3, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	600b      	str	r3, [r1, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	0800279c 	.word	0x0800279c

08000b98 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <LL_DMA_SetMode+0x44>)
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000bb8:	4908      	ldr	r1, [pc, #32]	; (8000bdc <LL_DMA_SetMode+0x44>)
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	440b      	add	r3, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	440b      	add	r3, r1
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	600b      	str	r3, [r1, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	0800279c 	.word	0x0800279c

08000be0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LL_DMA_SetPeriphIncMode+0x44>)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c00:	4908      	ldr	r1, [pc, #32]	; (8000c24 <LL_DMA_SetPeriphIncMode+0x44>)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	440b      	add	r3, r1
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	440b      	add	r3, r1
 8000c0e:	4619      	mov	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	0800279c 	.word	0x0800279c

08000c28 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <LL_DMA_SetMemoryIncMode+0x44>)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c48:	4908      	ldr	r1, [pc, #32]	; (8000c6c <LL_DMA_SetMemoryIncMode+0x44>)
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	440b      	add	r3, r1
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	440b      	add	r3, r1
 8000c56:	4619      	mov	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	0800279c 	.word	0x0800279c

08000c70 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <LL_DMA_SetPeriphSize+0x44>)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4413      	add	r3, r2
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000c90:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <LL_DMA_SetPeriphSize+0x44>)
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	440b      	add	r3, r1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	0800279c 	.word	0x0800279c

08000cb8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <LL_DMA_SetMemorySize+0x44>)
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000cd8:	4908      	ldr	r1, [pc, #32]	; (8000cfc <LL_DMA_SetMemorySize+0x44>)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	440b      	add	r3, r1
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	440b      	add	r3, r1
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	600b      	str	r3, [r1, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	0800279c 	.word	0x0800279c

08000d00 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	4413      	add	r3, r2
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4413      	add	r3, r2
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d20:	4908      	ldr	r1, [pc, #32]	; (8000d44 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	440b      	add	r3, r1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	440b      	add	r3, r1
 8000d2e:	4619      	mov	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	0800279c 	.word	0x0800279c

08000d48 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <LL_DMA_SetDataLength+0x44>)
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4413      	add	r3, r2
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	0c1b      	lsrs	r3, r3, #16
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	4908      	ldr	r1, [pc, #32]	; (8000d8c <LL_DMA_SetDataLength+0x44>)
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	440a      	add	r2, r1
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	4611      	mov	r1, r2
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	440a      	add	r2, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	0800279c 	.word	0x0800279c

08000d90 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <LL_DMA_SetChannelSelection+0x44>)
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4413      	add	r3, r2
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000db0:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <LL_DMA_SetChannelSelection+0x44>)
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	440b      	add	r3, r1
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	440b      	add	r3, r1
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	0800279c 	.word	0x0800279c

08000dd8 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <LL_DMA_DisableFifoMode+0x3c>)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <LL_DMA_DisableFifoMode+0x3c>)
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	440a      	add	r2, r1
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	440a      	add	r2, r1
 8000e00:	f023 0304 	bic.w	r3, r3, #4
 8000e04:	6153      	str	r3, [r2, #20]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	0800279c 	.word	0x0800279c

08000e18 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <LL_DMA_SetMemoryAddress+0x2c>)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4413      	add	r3, r2
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	0800279c 	.word	0x0800279c

08000e48 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <LL_DMA_SetPeriphAddress+0x2c>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4413      	add	r3, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6093      	str	r3, [r2, #8]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	0800279c 	.word	0x0800279c

08000e78 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000e82:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <LL_DMA_EnableIT_TC+0x3c>)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <LL_DMA_EnableIT_TC+0x3c>)
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	440a      	add	r2, r1
 8000e98:	7812      	ldrb	r2, [r2, #0]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	440a      	add	r2, r1
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	6013      	str	r3, [r2, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	0800279c 	.word	0x0800279c

08000eb8 <LL_USART_Enable>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	60da      	str	r2, [r3, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_USART_ConfigAsyncMode>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	615a      	str	r2, [r3, #20]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_USART_EnableIT_RXNE>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	330c      	adds	r3, #12
 8000f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	e853 3f00 	ldrex	r3, [r3]
 8000f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	330c      	adds	r3, #12
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	61ba      	str	r2, [r7, #24]
 8000f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f2c:	6979      	ldr	r1, [r7, #20]
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	e841 2300 	strex	r3, r2, [r1]
 8000f34:	613b      	str	r3, [r7, #16]
   return(result);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1e7      	bne.n	8000f0c <LL_USART_EnableIT_RXNE+0x8>
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_USART_EnableDMAReq_TX>:
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b089      	sub	sp, #36	; 0x24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3314      	adds	r3, #20
 8000f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	e853 3f00 	ldrex	r3, [r3]
 8000f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3314      	adds	r3, #20
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	61ba      	str	r2, [r7, #24]
 8000f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f72:	6979      	ldr	r1, [r7, #20]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	e841 2300 	strex	r3, r2, [r1]
 8000f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1e7      	bne.n	8000f52 <LL_USART_EnableDMAReq_TX+0x8>
}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	3724      	adds	r7, #36	; 0x24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_USART_DMA_GetRegAddr>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3304      	adds	r3, #4
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_AHB1_GRP1_EnableClock>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	40023800 	.word	0x40023800

08001008 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	615a      	str	r2, [r3, #20]
 8001020:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001032:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001036:	f7ff ffcf 	bl	8000fd8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff ffb4 	bl	8000fa8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001040:	230c      	movs	r3, #12
 8001042:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001044:	2302      	movs	r3, #2
 8001046:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001054:	2307      	movs	r3, #7
 8001056:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4831      	ldr	r0, [pc, #196]	; (8001124 <MX_USART2_UART_Init+0x11c>)
 800105e:	f000 ff4e 	bl	8001efe <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8001062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001066:	2106      	movs	r1, #6
 8001068:	482f      	ldr	r0, [pc, #188]	; (8001128 <MX_USART2_UART_Init+0x120>)
 800106a:	f7ff fe91 	bl	8000d90 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	2106      	movs	r1, #6
 8001072:	482d      	ldr	r0, [pc, #180]	; (8001128 <MX_USART2_UART_Init+0x120>)
 8001074:	f7ff fd6c 	bl	8000b50 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_MEDIUM);
 8001078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800107c:	2106      	movs	r1, #6
 800107e:	482a      	ldr	r0, [pc, #168]	; (8001128 <MX_USART2_UART_Init+0x120>)
 8001080:	f7ff fe3e 	bl	8000d00 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8001084:	2200      	movs	r2, #0
 8001086:	2106      	movs	r1, #6
 8001088:	4827      	ldr	r0, [pc, #156]	; (8001128 <MX_USART2_UART_Init+0x120>)
 800108a:	f7ff fd85 	bl	8000b98 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800108e:	2200      	movs	r2, #0
 8001090:	2106      	movs	r1, #6
 8001092:	4825      	ldr	r0, [pc, #148]	; (8001128 <MX_USART2_UART_Init+0x120>)
 8001094:	f7ff fda4 	bl	8000be0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8001098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109c:	2106      	movs	r1, #6
 800109e:	4822      	ldr	r0, [pc, #136]	; (8001128 <MX_USART2_UART_Init+0x120>)
 80010a0:	f7ff fdc2 	bl	8000c28 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2106      	movs	r1, #6
 80010a8:	481f      	ldr	r0, [pc, #124]	; (8001128 <MX_USART2_UART_Init+0x120>)
 80010aa:	f7ff fde1 	bl	8000c70 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2106      	movs	r1, #6
 80010b2:	481d      	ldr	r0, [pc, #116]	; (8001128 <MX_USART2_UART_Init+0x120>)
 80010b4:	f7ff fe00 	bl	8000cb8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 80010b8:	2106      	movs	r1, #6
 80010ba:	481b      	ldr	r0, [pc, #108]	; (8001128 <MX_USART2_UART_Init+0x120>)
 80010bc:	f7ff fe8c 	bl	8000dd8 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010c0:	f7ff fc7c 	bl	80009bc <__NVIC_GetPriorityGrouping>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fccc 	bl	8000a68 <NVIC_EncodePriority>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4619      	mov	r1, r3
 80010d4:	2026      	movs	r0, #38	; 0x26
 80010d6:	f7ff fc9d 	bl	8000a14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80010da:	2026      	movs	r0, #38	; 0x26
 80010dc:	f7ff fc7c 	bl	80009d8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80010e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010e4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80010f2:	230c      	movs	r3, #12
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010fa:	2300      	movs	r3, #0
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	4809      	ldr	r0, [pc, #36]	; (800112c <MX_USART2_UART_Init+0x124>)
 8001106:	f001 fa71 	bl	80025ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <MX_USART2_UART_Init+0x124>)
 800110c:	f7ff fee4 	bl	8000ed8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_USART2_UART_Init+0x124>)
 8001112:	f7ff fed1 	bl	8000eb8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  LL_USART_EnableIT_RXNE(USART2);
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART2_UART_Init+0x124>)
 8001118:	f7ff fef4 	bl	8000f04 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3738      	adds	r7, #56	; 0x38
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020000 	.word	0x40020000
 8001128:	40026000 	.word	0x40026000
 800112c:	40004400 	.word	0x40004400

08001130 <USART_Write_DMA>:
	LL_USART_EnableIT_TXE(USART2);
}

#if UART_USE_DMA > 0
void USART_Write_DMA(uint8_t * buffer, uint32_t nBytes)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 800113a:	2106      	movs	r1, #6
 800113c:	4815      	ldr	r0, [pc, #84]	; (8001194 <USART_Write_DMA+0x64>)
 800113e:	f7ff fce7 	bl	8000b10 <LL_DMA_DisableStream>

	/*B1. Copy user data to UART Global shared buffer */
	memcpy(uartSendBuf, buffer, nBytes);
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4814      	ldr	r0, [pc, #80]	; (8001198 <USART_Write_DMA+0x68>)
 8001148:	f001 faf4 	bl	8002734 <memcpy>

	/* Enable DMA access on UART */
	LL_USART_EnableDMAReq_TX(USART2);
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <USART_Write_DMA+0x6c>)
 800114e:	f7ff fefc 	bl	8000f4a <LL_USART_EnableDMAReq_TX>

	/* Set peripheral DMA adress - TDR */
	LL_DMA_SetPeriphAddress( DMA1, LL_DMA_STREAM_6, LL_USART_DMA_GetRegAddr(USART2) );
 8001152:	4812      	ldr	r0, [pc, #72]	; (800119c <USART_Write_DMA+0x6c>)
 8001154:	f7ff ff1c 	bl	8000f90 <LL_USART_DMA_GetRegAddr>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	2106      	movs	r1, #6
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <USART_Write_DMA+0x64>)
 8001160:	f7ff fe72 	bl	8000e48 <LL_DMA_SetPeriphAddress>

	/* Set memory address - user buffer */
	LL_DMA_SetMemoryAddress( DMA1, LL_DMA_STREAM_6, (uint32_t) (uartSendBuf) );
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <USART_Write_DMA+0x68>)
 8001166:	461a      	mov	r2, r3
 8001168:	2106      	movs	r1, #6
 800116a:	480a      	ldr	r0, [pc, #40]	; (8001194 <USART_Write_DMA+0x64>)
 800116c:	f7ff fe54 	bl	8000e18 <LL_DMA_SetMemoryAddress>

	/* Configure number of transfer bytes */
	LL_DMA_SetDataLength( DMA1, LL_DMA_STREAM_6, nBytes);
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	2106      	movs	r1, #6
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <USART_Write_DMA+0x64>)
 8001176:	f7ff fde7 	bl	8000d48 <LL_DMA_SetDataLength>

	/* Enable DMA Interupt */
	LL_DMA_EnableIT_TC( DMA1, LL_DMA_STREAM_6 );
 800117a:	2106      	movs	r1, #6
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <USART_Write_DMA+0x64>)
 800117e:	f7ff fe7b 	bl	8000e78 <LL_DMA_EnableIT_TC>

	/*Enable DMA Stream */
	LL_DMA_EnableStream( DMA1, LL_DMA_STREAM_6 );
 8001182:	2106      	movs	r1, #6
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <USART_Write_DMA+0x64>)
 8001186:	f7ff fca3 	bl	8000ad0 <LL_DMA_EnableStream>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40026000 	.word	0x40026000
 8001198:	200000b0 	.word	0x200000b0
 800119c:	40004400 	.word	0x40004400

080011a0 <UART_Test>:
#endif


void UART_Test()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	const char*  welcome_str = "hello world";
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <UART_Test+0x24>)
 80011a8:	607b      	str	r3, [r7, #4]

#if UART_USE_DMA > 0
	USART_Write_DMA((uint8_t*)welcome_str, strlen(welcome_str));
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff f80c 	bl	80001c8 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ffbb 	bl	8001130 <USART_Write_DMA>
#else
	USART_Write((uint8_t*)welcome_str, strlen(welcome_str));
#endif
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	08002778 	.word	0x08002778

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011f2:	f7ff fbd1 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f001 fa79 	bl	80026ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fa3d 	bl	8000678 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800120c:	080027b4 	.word	0x080027b4
  ldr r2, =_sbss
 8001210:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001214:	20000138 	.word	0x20000138

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f90d 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fa86 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f917 	bl	80014b2 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f8ed 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000134 	.word	0x20000134

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000134 	.word	0x20000134

08001300 <__NVIC_SetPriorityGrouping>:
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_SetPriority>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff47 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff5c 	bl	8001348 <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffb0 	bl	8001420 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e264      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d075      	beq.n	80015d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ea:	4ba3      	ldr	r3, [pc, #652]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d00c      	beq.n	8001510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	4ba0      	ldr	r3, [pc, #640]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d112      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4b9d      	ldr	r3, [pc, #628]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150e:	d10b      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b99      	ldr	r3, [pc, #612]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d05b      	beq.n	80015d4 <HAL_RCC_OscConfig+0x108>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d157      	bne.n	80015d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e23f      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x74>
 8001532:	4b91      	ldr	r3, [pc, #580]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a90      	ldr	r2, [pc, #576]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x98>
 800154a:	4b8b      	ldr	r3, [pc, #556]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a8a      	ldr	r2, [pc, #552]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a87      	ldr	r2, [pc, #540]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001564:	4b84      	ldr	r3, [pc, #528]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a83      	ldr	r2, [pc, #524]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b81      	ldr	r3, [pc, #516]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a80      	ldr	r2, [pc, #512]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff feb0 	bl	80012e8 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff feac 	bl	80012e8 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e204      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xc0>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fe9c 	bl	80012e8 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fe98 	bl	80012e8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1f0      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0xe8>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d063      	beq.n	80016aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b62      	ldr	r3, [pc, #392]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b5f      	ldr	r3, [pc, #380]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1c4      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b56      	ldr	r3, [pc, #344]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4952      	ldr	r1, [pc, #328]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b4f      	ldr	r3, [pc, #316]	; (800177c <HAL_RCC_OscConfig+0x2b0>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fe51 	bl	80012e8 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fe4d 	bl	80012e8 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1a5      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4940      	ldr	r1, [pc, #256]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_OscConfig+0x2b0>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fe30 	bl	80012e8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fe2c 	bl	80012e8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e184      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d030      	beq.n	8001718 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d016      	beq.n	80016ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_RCC_OscConfig+0x2b4>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fe10 	bl	80012e8 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff fe0c 	bl	80012e8 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e164      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x200>
 80016ea:	e015      	b.n	8001718 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <HAL_RCC_OscConfig+0x2b4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fdf9 	bl	80012e8 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff fdf5 	bl	80012e8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e14d      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f0      	bne.n	80016fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a0 	beq.w	8001866 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001752:	2301      	movs	r3, #1
 8001754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_OscConfig+0x2b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d121      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_RCC_OscConfig+0x2b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_RCC_OscConfig+0x2b8>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176e:	f7ff fdbb 	bl	80012e8 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e011      	b.n	800179a <HAL_RCC_OscConfig+0x2ce>
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	42470000 	.word	0x42470000
 8001780:	42470e80 	.word	0x42470e80
 8001784:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff fdae 	bl	80012e8 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e106      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b85      	ldr	r3, [pc, #532]	; (80019b0 <HAL_RCC_OscConfig+0x4e4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x2f0>
 80017ae:	4b81      	ldr	r3, [pc, #516]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a80      	ldr	r2, [pc, #512]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	e01c      	b.n	80017f6 <HAL_RCC_OscConfig+0x32a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d10c      	bne.n	80017de <HAL_RCC_OscConfig+0x312>
 80017c4:	4b7b      	ldr	r3, [pc, #492]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	4a7a      	ldr	r2, [pc, #488]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6713      	str	r3, [r2, #112]	; 0x70
 80017d0:	4b78      	ldr	r3, [pc, #480]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a77      	ldr	r2, [pc, #476]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
 80017dc:	e00b      	b.n	80017f6 <HAL_RCC_OscConfig+0x32a>
 80017de:	4b75      	ldr	r3, [pc, #468]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e2:	4a74      	ldr	r2, [pc, #464]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ea:	4b72      	ldr	r3, [pc, #456]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	4a71      	ldr	r2, [pc, #452]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017f0:	f023 0304 	bic.w	r3, r3, #4
 80017f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d015      	beq.n	800182a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff fd73 	bl	80012e8 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff fd6f 	bl	80012e8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e0c5      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0ee      	beq.n	8001806 <HAL_RCC_OscConfig+0x33a>
 8001828:	e014      	b.n	8001854 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182a:	f7ff fd5d 	bl	80012e8 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fd59 	bl	80012e8 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0af      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1ee      	bne.n	8001832 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d105      	bne.n	8001866 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185a:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a55      	ldr	r2, [pc, #340]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 8001860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 809b 	beq.w	80019a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001870:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b08      	cmp	r3, #8
 800187a:	d05c      	beq.n	8001936 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d141      	bne.n	8001908 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001884:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_OscConfig+0x4ec>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fd2d 	bl	80012e8 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff fd29 	bl	80012e8 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e081      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69da      	ldr	r2, [r3, #28]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	019b      	lsls	r3, r3, #6
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	3b01      	subs	r3, #1
 80018ca:	041b      	lsls	r3, r3, #16
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	061b      	lsls	r3, r3, #24
 80018d4:	4937      	ldr	r1, [pc, #220]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018da:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_RCC_OscConfig+0x4ec>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fd02 	bl	80012e8 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fcfe 	bl	80012e8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e056      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x41c>
 8001906:	e04e      	b.n	80019a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_RCC_OscConfig+0x4ec>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fceb 	bl	80012e8 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff fce7 	bl	80012e8 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e03f      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x44a>
 8001934:	e037      	b.n	80019a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e032      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d028      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d121      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d11a      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001978:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800197a:	4293      	cmp	r3, r2
 800197c:	d111      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	3b01      	subs	r3, #1
 800198c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40007000 	.word	0x40007000
 80019b4:	40023800 	.word	0x40023800
 80019b8:	42470060 	.word	0x42470060

080019bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0cc      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d90c      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0b8      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	494d      	ldr	r1, [pc, #308]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d044      	beq.n	8001adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d119      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e07f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e06f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e067      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0203 	bic.w	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4934      	ldr	r1, [pc, #208]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aac:	f7ff fc1c 	bl	80012e8 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7ff fc18 	bl	80012e8 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e04f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 020c 	and.w	r2, r3, #12
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1eb      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d20c      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e032      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4916      	ldr	r1, [pc, #88]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	490e      	ldr	r1, [pc, #56]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b42:	f000 f821 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	490a      	ldr	r1, [pc, #40]	; (8001b7c <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb7c 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08002784 	.word	0x08002784
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b8e:	2100      	movs	r1, #0
 8001b90:	6079      	str	r1, [r7, #4]
 8001b92:	2100      	movs	r1, #0
 8001b94:	60f9      	str	r1, [r7, #12]
 8001b96:	2100      	movs	r1, #0
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9e:	4952      	ldr	r1, [pc, #328]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ba0:	6889      	ldr	r1, [r1, #8]
 8001ba2:	f001 010c 	and.w	r1, r1, #12
 8001ba6:	2908      	cmp	r1, #8
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001baa:	2908      	cmp	r1, #8
 8001bac:	f200 8094 	bhi.w	8001cd8 <HAL_RCC_GetSysClockFreq+0x150>
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x32>
 8001bb4:	2904      	cmp	r1, #4
 8001bb6:	d003      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x38>
 8001bb8:	e08e      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bba:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_GetSysClockFreq+0x164>)
 8001bbc:	60bb      	str	r3, [r7, #8]
       break;
 8001bbe:	e08e      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001bc2:	60bb      	str	r3, [r7, #8]
      break;
 8001bc4:	e08b      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc6:	4948      	ldr	r1, [pc, #288]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bc8:	6849      	ldr	r1, [r1, #4]
 8001bca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001bce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd0:	4945      	ldr	r1, [pc, #276]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bd2:	6849      	ldr	r1, [r1, #4]
 8001bd4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001bd8:	2900      	cmp	r1, #0
 8001bda:	d024      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bdc:	4942      	ldr	r1, [pc, #264]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bde:	6849      	ldr	r1, [r1, #4]
 8001be0:	0989      	lsrs	r1, r1, #6
 8001be2:	4608      	mov	r0, r1
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001bec:	f04f 0500 	mov.w	r5, #0
 8001bf0:	ea00 0204 	and.w	r2, r0, r4
 8001bf4:	ea01 0305 	and.w	r3, r1, r5
 8001bf8:	493d      	ldr	r1, [pc, #244]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001bfa:	fb01 f003 	mul.w	r0, r1, r3
 8001bfe:	2100      	movs	r1, #0
 8001c00:	fb01 f102 	mul.w	r1, r1, r2
 8001c04:	1844      	adds	r4, r0, r1
 8001c06:	493a      	ldr	r1, [pc, #232]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c08:	fba2 0101 	umull	r0, r1, r2, r1
 8001c0c:	1863      	adds	r3, r4, r1
 8001c0e:	4619      	mov	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	f7fe fade 	bl	80001d8 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	e04a      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c26:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	099b      	lsrs	r3, r3, #6
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	ea02 0400 	and.w	r4, r2, r0
 8001c3e:	ea03 0501 	and.w	r5, r3, r1
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	014b      	lsls	r3, r1, #5
 8001c50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c54:	0142      	lsls	r2, r0, #5
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	1b00      	subs	r0, r0, r4
 8001c5c:	eb61 0105 	sbc.w	r1, r1, r5
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	018b      	lsls	r3, r1, #6
 8001c6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c6e:	0182      	lsls	r2, r0, #6
 8001c70:	1a12      	subs	r2, r2, r0
 8001c72:	eb63 0301 	sbc.w	r3, r3, r1
 8001c76:	f04f 0000 	mov.w	r0, #0
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	00d9      	lsls	r1, r3, #3
 8001c80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c84:	00d0      	lsls	r0, r2, #3
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	1912      	adds	r2, r2, r4
 8001c8c:	eb45 0303 	adc.w	r3, r5, r3
 8001c90:	f04f 0000 	mov.w	r0, #0
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	0299      	lsls	r1, r3, #10
 8001c9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c9e:	0290      	lsls	r0, r2, #10
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f7fe fa92 	bl	80001d8 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	60bb      	str	r3, [r7, #8]
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_RCC_GetSysClockFreq+0x164>)
 8001cda:	60bb      	str	r3, [r7, #8]
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	68bb      	ldr	r3, [r7, #8]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	00f42400 	.word	0x00f42400
 8001cf0:	017d7840 	.word	0x017d7840

08001cf4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	613b      	str	r3, [r7, #16]
  return result;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	61bb      	str	r3, [r7, #24]
  return result;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	431a      	orrs	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	601a      	str	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	401a      	ands	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b089      	sub	sp, #36	; 0x24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	613b      	str	r3, [r7, #16]
  return result;
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2103      	movs	r1, #3
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	401a      	ands	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	61bb      	str	r3, [r7, #24]
  return result;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001dd4:	bf00      	nop
 8001dd6:	3724      	adds	r7, #36	; 0x24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	613b      	str	r3, [r7, #16]
  return result;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2103      	movs	r1, #3
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	61bb      	str	r3, [r7, #24]
  return result;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	60da      	str	r2, [r3, #12]
}
 8001e32:	bf00      	nop
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b089      	sub	sp, #36	; 0x24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a1a      	ldr	r2, [r3, #32]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	613b      	str	r3, [r7, #16]
  return result;
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	210f      	movs	r1, #15
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	61bb      	str	r3, [r7, #24]
  return result;
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001e90:	bf00      	nop
 8001e92:	3724      	adds	r7, #36	; 0x24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	613b      	str	r3, [r7, #16]
  return result;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	61bb      	str	r3, [r7, #24]
  return result;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b088      	sub	sp, #32
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	613b      	str	r3, [r7, #16]
  return result;
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f28:	e050      	b.n	8001fcc <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2101      	movs	r1, #1
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d042      	beq.n	8001fc6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d003      	beq.n	8001f50 <LL_GPIO_Init+0x52>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d10d      	bne.n	8001f6c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	461a      	mov	r2, r3
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff12 	bl	8001d82 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	461a      	mov	r2, r3
 8001f64:	69b9      	ldr	r1, [r7, #24]
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fef3 	bl	8001d52 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	461a      	mov	r2, r3
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff33 	bl	8001de0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d11a      	bne.n	8001fb8 <LL_GPIO_Init+0xba>
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	60bb      	str	r3, [r7, #8]
  return result;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b07      	cmp	r3, #7
 8001f98:	d807      	bhi.n	8001faa <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	69b9      	ldr	r1, [r7, #24]
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ff4b 	bl	8001e3e <LL_GPIO_SetAFPin_0_7>
 8001fa8:	e006      	b.n	8001fb8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	69b9      	ldr	r1, [r7, #24]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff72 	bl	8001e9c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fe97 	bl	8001cf4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1a7      	bne.n	8001f2a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <LL_RCC_GetSysClkSource+0x18>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <LL_RCC_GetAHBPrescaler+0x18>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800

08002038 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <LL_RCC_GetAPB2Prescaler+0x18>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <LL_RCC_PLL_GetMainSource+0x18>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <LL_RCC_PLL_GetN+0x18>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40023800 	.word	0x40023800

0800208c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <LL_RCC_PLL_GetP+0x18>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <LL_RCC_PLL_GetDivider+0x18>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800

080020c4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80020cc:	f000 f820 	bl	8002110 <RCC_GetSystemClockFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f840 	bl	8002160 <RCC_GetHCLKClockFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f84e 	bl	800218c <RCC_GetPCLK1ClockFreq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f85a 	bl	80021b4 <RCC_GetPCLK2ClockFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60da      	str	r2, [r3, #12]
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800211a:	f7ff ff63 	bl	8001fe4 <LL_RCC_GetSysClkSource>
 800211e:	4603      	mov	r3, r0
 8002120:	2b08      	cmp	r3, #8
 8002122:	d00c      	beq.n	800213e <RCC_GetSystemClockFreq+0x2e>
 8002124:	2b08      	cmp	r3, #8
 8002126:	d80f      	bhi.n	8002148 <RCC_GetSystemClockFreq+0x38>
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <RCC_GetSystemClockFreq+0x22>
 800212c:	2b04      	cmp	r3, #4
 800212e:	d003      	beq.n	8002138 <RCC_GetSystemClockFreq+0x28>
 8002130:	e00a      	b.n	8002148 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <RCC_GetSystemClockFreq+0x48>)
 8002134:	607b      	str	r3, [r7, #4]
      break;
 8002136:	e00a      	b.n	800214e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <RCC_GetSystemClockFreq+0x4c>)
 800213a:	607b      	str	r3, [r7, #4]
      break;
 800213c:	e007      	b.n	800214e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800213e:	2008      	movs	r0, #8
 8002140:	f000 f84c 	bl	80021dc <RCC_PLL_GetFreqDomain_SYS>
 8002144:	6078      	str	r0, [r7, #4]
      break;
 8002146:	e002      	b.n	800214e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <RCC_GetSystemClockFreq+0x48>)
 800214a:	607b      	str	r3, [r7, #4]
      break;
 800214c:	bf00      	nop
  }

  return frequency;
 800214e:	687b      	ldr	r3, [r7, #4]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	00f42400 	.word	0x00f42400
 800215c:	017d7840 	.word	0x017d7840

08002160 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002168:	f7ff ff4a 	bl	8002000 <LL_RCC_GetAHBPrescaler>
 800216c:	4603      	mov	r3, r0
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <RCC_GetHCLKClockFreq+0x28>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	461a      	mov	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	40d3      	lsrs	r3, r2
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	08002784 	.word	0x08002784

0800218c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002194:	f7ff ff42 	bl	800201c <LL_RCC_GetAPB1Prescaler>
 8002198:	4603      	mov	r3, r0
 800219a:	0a9b      	lsrs	r3, r3, #10
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <RCC_GetPCLK1ClockFreq+0x24>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	461a      	mov	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	40d3      	lsrs	r3, r2
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	08002794 	.word	0x08002794

080021b4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80021bc:	f7ff ff3c 	bl	8002038 <LL_RCC_GetAPB2Prescaler>
 80021c0:	4603      	mov	r3, r0
 80021c2:	0b5b      	lsrs	r3, r3, #13
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <RCC_GetPCLK2ClockFreq+0x24>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	461a      	mov	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	40d3      	lsrs	r3, r2
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	08002794 	.word	0x08002794

080021dc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80021f0:	f7ff ff30 	bl	8002054 <LL_RCC_PLL_GetMainSource>
 80021f4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002202:	d003      	beq.n	800220c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002204:	e005      	b.n	8002212 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002208:	617b      	str	r3, [r7, #20]
      break;
 800220a:	e005      	b.n	8002218 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800220e:	617b      	str	r3, [r7, #20]
      break;
 8002210:	e002      	b.n	8002218 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002214:	617b      	str	r3, [r7, #20]
      break;
 8002216:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b08      	cmp	r3, #8
 800221c:	d113      	bne.n	8002246 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800221e:	f7ff ff43 	bl	80020a8 <LL_RCC_PLL_GetDivider>
 8002222:	4602      	mov	r2, r0
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fbb3 f4f2 	udiv	r4, r3, r2
 800222a:	f7ff ff21 	bl	8002070 <LL_RCC_PLL_GetN>
 800222e:	4603      	mov	r3, r0
 8002230:	fb03 f404 	mul.w	r4, r3, r4
 8002234:	f7ff ff2a 	bl	800208c <LL_RCC_PLL_GetP>
 8002238:	4603      	mov	r3, r0
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	3301      	adds	r3, #1
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fbb4 f3f3 	udiv	r3, r4, r3
 8002244:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002246:	693b      	ldr	r3, [r7, #16]
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}
 8002250:	00f42400 	.word	0x00f42400
 8002254:	017d7840 	.word	0x017d7840

08002258 <LL_USART_IsEnabled>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226c:	bf0c      	ite	eq
 800226e:	2301      	moveq	r3, #1
 8002270:	2300      	movne	r3, #0
 8002272:	b2db      	uxtb	r3, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_USART_SetStopBitsLength>:
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	611a      	str	r2, [r3, #16]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_USART_SetHWFlowCtrl>:
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	615a      	str	r2, [r3, #20]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_USART_SetBaudRate>:
{
 80022cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d0:	b09f      	sub	sp, #124	; 0x7c
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6778      	str	r0, [r7, #116]	; 0x74
 80022d6:	6739      	str	r1, [r7, #112]	; 0x70
 80022d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022da:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80022dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e2:	f040 80bc 	bne.w	800245e <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80022e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e8:	461c      	mov	r4, r3
 80022ea:	f04f 0500 	mov.w	r5, #0
 80022ee:	4622      	mov	r2, r4
 80022f0:	462b      	mov	r3, r5
 80022f2:	eb12 0a02 	adds.w	sl, r2, r2
 80022f6:	eb43 0b03 	adc.w	fp, r3, r3
 80022fa:	4652      	mov	r2, sl
 80022fc:	465b      	mov	r3, fp
 80022fe:	1912      	adds	r2, r2, r4
 8002300:	eb45 0303 	adc.w	r3, r5, r3
 8002304:	f04f 0000 	mov.w	r0, #0
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	00d9      	lsls	r1, r3, #3
 800230e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002312:	00d0      	lsls	r0, r2, #3
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	1911      	adds	r1, r2, r4
 800231a:	6639      	str	r1, [r7, #96]	; 0x60
 800231c:	416b      	adcs	r3, r5
 800231e:	667b      	str	r3, [r7, #100]	; 0x64
 8002320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002322:	461a      	mov	r2, r3
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	1891      	adds	r1, r2, r2
 800232a:	6339      	str	r1, [r7, #48]	; 0x30
 800232c:	415b      	adcs	r3, r3
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
 8002330:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002334:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002338:	f7fd ff4e 	bl	80001d8 <__aeabi_uldivmod>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4ba9      	ldr	r3, [pc, #676]	; (80025e8 <LL_USART_SetBaudRate+0x31c>)
 8002342:	fba3 2302 	umull	r2, r3, r3, r2
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	b29b      	uxth	r3, r3
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	b29e      	uxth	r6, r3
 800234e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002350:	461c      	mov	r4, r3
 8002352:	f04f 0500 	mov.w	r5, #0
 8002356:	4622      	mov	r2, r4
 8002358:	462b      	mov	r3, r5
 800235a:	1891      	adds	r1, r2, r2
 800235c:	62b9      	str	r1, [r7, #40]	; 0x28
 800235e:	415b      	adcs	r3, r3
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002366:	1912      	adds	r2, r2, r4
 8002368:	eb45 0303 	adc.w	r3, r5, r3
 800236c:	f04f 0000 	mov.w	r0, #0
 8002370:	f04f 0100 	mov.w	r1, #0
 8002374:	00d9      	lsls	r1, r3, #3
 8002376:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800237a:	00d0      	lsls	r0, r2, #3
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	1911      	adds	r1, r2, r4
 8002382:	65b9      	str	r1, [r7, #88]	; 0x58
 8002384:	416b      	adcs	r3, r5
 8002386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002388:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800238a:	461a      	mov	r2, r3
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	1891      	adds	r1, r2, r2
 8002392:	6239      	str	r1, [r7, #32]
 8002394:	415b      	adcs	r3, r3
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
 8002398:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800239c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80023a0:	f7fd ff1a 	bl	80001d8 <__aeabi_uldivmod>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4b8f      	ldr	r3, [pc, #572]	; (80025e8 <LL_USART_SetBaudRate+0x31c>)
 80023aa:	fba3 1302 	umull	r1, r3, r3, r2
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2164      	movs	r1, #100	; 0x64
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	3332      	adds	r3, #50	; 0x32
 80023bc:	4a8a      	ldr	r2, [pc, #552]	; (80025e8 <LL_USART_SetBaudRate+0x31c>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	4433      	add	r3, r6
 80023d2:	b29e      	uxth	r6, r3
 80023d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d6:	4618      	mov	r0, r3
 80023d8:	f04f 0100 	mov.w	r1, #0
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	1894      	adds	r4, r2, r2
 80023e2:	61bc      	str	r4, [r7, #24]
 80023e4:	415b      	adcs	r3, r3
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ec:	1812      	adds	r2, r2, r0
 80023ee:	eb41 0303 	adc.w	r3, r1, r3
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	f04f 0500 	mov.w	r5, #0
 80023fa:	00dd      	lsls	r5, r3, #3
 80023fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002400:	00d4      	lsls	r4, r2, #3
 8002402:	4622      	mov	r2, r4
 8002404:	462b      	mov	r3, r5
 8002406:	1814      	adds	r4, r2, r0
 8002408:	653c      	str	r4, [r7, #80]	; 0x50
 800240a:	414b      	adcs	r3, r1
 800240c:	657b      	str	r3, [r7, #84]	; 0x54
 800240e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002410:	461a      	mov	r2, r3
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	1891      	adds	r1, r2, r2
 8002418:	6139      	str	r1, [r7, #16]
 800241a:	415b      	adcs	r3, r3
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002422:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002426:	f7fd fed7 	bl	80001d8 <__aeabi_uldivmod>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4b6e      	ldr	r3, [pc, #440]	; (80025e8 <LL_USART_SetBaudRate+0x31c>)
 8002430:	fba3 1302 	umull	r1, r3, r3, r2
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	2164      	movs	r1, #100	; 0x64
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	3332      	adds	r3, #50	; 0x32
 8002442:	4a69      	ldr	r2, [pc, #420]	; (80025e8 <LL_USART_SetBaudRate+0x31c>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	b29b      	uxth	r3, r3
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	b29b      	uxth	r3, r3
 8002452:	4433      	add	r3, r6
 8002454:	b29b      	uxth	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800245a:	609a      	str	r2, [r3, #8]
}
 800245c:	e0be      	b.n	80025dc <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800245e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002460:	461c      	mov	r4, r3
 8002462:	f04f 0500 	mov.w	r5, #0
 8002466:	4622      	mov	r2, r4
 8002468:	462b      	mov	r3, r5
 800246a:	eb12 0802 	adds.w	r8, r2, r2
 800246e:	eb43 0903 	adc.w	r9, r3, r3
 8002472:	4642      	mov	r2, r8
 8002474:	464b      	mov	r3, r9
 8002476:	1912      	adds	r2, r2, r4
 8002478:	eb45 0303 	adc.w	r3, r5, r3
 800247c:	f04f 0000 	mov.w	r0, #0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	00d9      	lsls	r1, r3, #3
 8002486:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800248a:	00d0      	lsls	r0, r2, #3
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	1911      	adds	r1, r2, r4
 8002492:	64b9      	str	r1, [r7, #72]	; 0x48
 8002494:	416b      	adcs	r3, r5
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800249a:	4618      	mov	r0, r3
 800249c:	f04f 0100 	mov.w	r1, #0
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	008b      	lsls	r3, r1, #2
 80024aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024ae:	0082      	lsls	r2, r0, #2
 80024b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80024b4:	f7fd fe90 	bl	80001d8 <__aeabi_uldivmod>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <LL_USART_SetBaudRate+0x31c>)
 80024be:	fba3 2302 	umull	r2, r3, r3, r2
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	b29e      	uxth	r6, r3
 80024ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024cc:	4618      	mov	r0, r3
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	1894      	adds	r4, r2, r2
 80024d8:	60bc      	str	r4, [r7, #8]
 80024da:	415b      	adcs	r3, r3
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024e2:	1812      	adds	r2, r2, r0
 80024e4:	eb41 0303 	adc.w	r3, r1, r3
 80024e8:	f04f 0400 	mov.w	r4, #0
 80024ec:	f04f 0500 	mov.w	r5, #0
 80024f0:	00dd      	lsls	r5, r3, #3
 80024f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024f6:	00d4      	lsls	r4, r2, #3
 80024f8:	4622      	mov	r2, r4
 80024fa:	462b      	mov	r3, r5
 80024fc:	1814      	adds	r4, r2, r0
 80024fe:	643c      	str	r4, [r7, #64]	; 0x40
 8002500:	414b      	adcs	r3, r1
 8002502:	647b      	str	r3, [r7, #68]	; 0x44
 8002504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002506:	4618      	mov	r0, r3
 8002508:	f04f 0100 	mov.w	r1, #0
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	008b      	lsls	r3, r1, #2
 8002516:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800251a:	0082      	lsls	r2, r0, #2
 800251c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002520:	f7fd fe5a 	bl	80001d8 <__aeabi_uldivmod>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <LL_USART_SetBaudRate+0x31c>)
 800252a:	fba3 1302 	umull	r1, r3, r3, r2
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2164      	movs	r1, #100	; 0x64
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	3332      	adds	r3, #50	; 0x32
 800253c:	4a2a      	ldr	r2, [pc, #168]	; (80025e8 <LL_USART_SetBaudRate+0x31c>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	b29b      	uxth	r3, r3
 8002546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254a:	b29b      	uxth	r3, r3
 800254c:	4433      	add	r3, r6
 800254e:	b29e      	uxth	r6, r3
 8002550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002552:	4618      	mov	r0, r3
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	1894      	adds	r4, r2, r2
 800255e:	603c      	str	r4, [r7, #0]
 8002560:	415b      	adcs	r3, r3
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002568:	1812      	adds	r2, r2, r0
 800256a:	eb41 0303 	adc.w	r3, r1, r3
 800256e:	f04f 0400 	mov.w	r4, #0
 8002572:	f04f 0500 	mov.w	r5, #0
 8002576:	00dd      	lsls	r5, r3, #3
 8002578:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800257c:	00d4      	lsls	r4, r2, #3
 800257e:	4622      	mov	r2, r4
 8002580:	462b      	mov	r3, r5
 8002582:	1814      	adds	r4, r2, r0
 8002584:	63bc      	str	r4, [r7, #56]	; 0x38
 8002586:	414b      	adcs	r3, r1
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800258c:	4618      	mov	r0, r3
 800258e:	f04f 0100 	mov.w	r1, #0
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	008b      	lsls	r3, r1, #2
 800259c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025a0:	0082      	lsls	r2, r0, #2
 80025a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025a6:	f7fd fe17 	bl	80001d8 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <LL_USART_SetBaudRate+0x31c>)
 80025b0:	fba3 1302 	umull	r1, r3, r3, r2
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	2164      	movs	r1, #100	; 0x64
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	3332      	adds	r3, #50	; 0x32
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <LL_USART_SetBaudRate+0x31c>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4433      	add	r3, r6
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	bf00      	nop
 80025de:	377c      	adds	r7, #124	; 0x7c
 80025e0:	46bd      	mov	sp, r7
 80025e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e6:	bf00      	nop
 80025e8:	51eb851f 	.word	0x51eb851f

080025ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fe2a 	bl	8002258 <LL_USART_IsEnabled>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d15e      	bne.n	80026c8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002612:	f023 030c 	bic.w	r3, r3, #12
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	6851      	ldr	r1, [r2, #4]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	68d2      	ldr	r2, [r2, #12]
 800261e:	4311      	orrs	r1, r2
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	6912      	ldr	r2, [r2, #16]
 8002624:	4311      	orrs	r1, r2
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	6992      	ldr	r2, [r2, #24]
 800262a:	430a      	orrs	r2, r1
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4619      	mov	r1, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff fe21 	bl	8002280 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff fe2e 	bl	80022a6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800264a:	f107 0308 	add.w	r3, r7, #8
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fd38 	bl	80020c4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <LL_USART_Init+0xe8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d102      	bne.n	8002662 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e021      	b.n	80026a6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <LL_USART_Init+0xec>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d102      	bne.n	8002670 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	e01a      	b.n	80026a6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <LL_USART_Init+0xf0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d102      	bne.n	800267e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	e013      	b.n	80026a6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <LL_USART_Init+0xf4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d102      	bne.n	800268c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	e00c      	b.n	80026a6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <LL_USART_Init+0xf8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d102      	bne.n	800269a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	e005      	b.n	80026a6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <LL_USART_Init+0xfc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00d      	beq.n	80026c8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80026b4:	2300      	movs	r3, #0
 80026b6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	699a      	ldr	r2, [r3, #24]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69b9      	ldr	r1, [r7, #24]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff fe02 	bl	80022cc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80026c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40011000 	.word	0x40011000
 80026d8:	40004400 	.word	0x40004400
 80026dc:	40004800 	.word	0x40004800
 80026e0:	40011400 	.word	0x40011400
 80026e4:	40004c00 	.word	0x40004c00
 80026e8:	40005000 	.word	0x40005000

080026ec <__libc_init_array>:
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	4d0d      	ldr	r5, [pc, #52]	; (8002724 <__libc_init_array+0x38>)
 80026f0:	4c0d      	ldr	r4, [pc, #52]	; (8002728 <__libc_init_array+0x3c>)
 80026f2:	1b64      	subs	r4, r4, r5
 80026f4:	10a4      	asrs	r4, r4, #2
 80026f6:	2600      	movs	r6, #0
 80026f8:	42a6      	cmp	r6, r4
 80026fa:	d109      	bne.n	8002710 <__libc_init_array+0x24>
 80026fc:	4d0b      	ldr	r5, [pc, #44]	; (800272c <__libc_init_array+0x40>)
 80026fe:	4c0c      	ldr	r4, [pc, #48]	; (8002730 <__libc_init_array+0x44>)
 8002700:	f000 f82e 	bl	8002760 <_init>
 8002704:	1b64      	subs	r4, r4, r5
 8002706:	10a4      	asrs	r4, r4, #2
 8002708:	2600      	movs	r6, #0
 800270a:	42a6      	cmp	r6, r4
 800270c:	d105      	bne.n	800271a <__libc_init_array+0x2e>
 800270e:	bd70      	pop	{r4, r5, r6, pc}
 8002710:	f855 3b04 	ldr.w	r3, [r5], #4
 8002714:	4798      	blx	r3
 8002716:	3601      	adds	r6, #1
 8002718:	e7ee      	b.n	80026f8 <__libc_init_array+0xc>
 800271a:	f855 3b04 	ldr.w	r3, [r5], #4
 800271e:	4798      	blx	r3
 8002720:	3601      	adds	r6, #1
 8002722:	e7f2      	b.n	800270a <__libc_init_array+0x1e>
 8002724:	080027ac 	.word	0x080027ac
 8002728:	080027ac 	.word	0x080027ac
 800272c:	080027ac 	.word	0x080027ac
 8002730:	080027b0 	.word	0x080027b0

08002734 <memcpy>:
 8002734:	440a      	add	r2, r1
 8002736:	4291      	cmp	r1, r2
 8002738:	f100 33ff 	add.w	r3, r0, #4294967295
 800273c:	d100      	bne.n	8002740 <memcpy+0xc>
 800273e:	4770      	bx	lr
 8002740:	b510      	push	{r4, lr}
 8002742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800274a:	4291      	cmp	r1, r2
 800274c:	d1f9      	bne.n	8002742 <memcpy+0xe>
 800274e:	bd10      	pop	{r4, pc}

08002750 <memset>:
 8002750:	4402      	add	r2, r0
 8002752:	4603      	mov	r3, r0
 8002754:	4293      	cmp	r3, r2
 8002756:	d100      	bne.n	800275a <memset+0xa>
 8002758:	4770      	bx	lr
 800275a:	f803 1b01 	strb.w	r1, [r3], #1
 800275e:	e7f9      	b.n	8002754 <memset+0x4>

08002760 <_init>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr

0800276c <_fini>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr
