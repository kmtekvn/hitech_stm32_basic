
systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002900  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa8  08002aa8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002aa8  08002aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ab0  08002ab0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ab0  08002ab0  00012ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000048  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000054  20000054  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008014  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c90  00000000  00000000  00028050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  00029ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000680  00000000  00000000  0002a458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c69  00000000  00000000  0002aad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008952  00000000  00000000  0004c741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9dc3  00000000  00000000  00055093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011ee56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c18  00000000  00000000  0011eeac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a70 	.word	0x08002a70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002a70 	.word	0x08002a70

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004c4:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <__NVIC_GetPriorityGrouping+0x18>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	0a1b      	lsrs	r3, r3, #8
 80004ca:	f003 0307 	and.w	r3, r3, #7
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db0b      	blt.n	8000506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 021f 	and.w	r2, r3, #31
 80004f4:	4907      	ldr	r1, [pc, #28]	; (8000514 <__NVIC_EnableIRQ+0x38>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	095b      	lsrs	r3, r3, #5
 80004fc:	2001      	movs	r0, #1
 80004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000e100 	.word	0xe000e100

08000518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	db0a      	blt.n	8000542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	490c      	ldr	r1, [pc, #48]	; (8000564 <__NVIC_SetPriority+0x4c>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	440b      	add	r3, r1
 800053c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000540:	e00a      	b.n	8000558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4908      	ldr	r1, [pc, #32]	; (8000568 <__NVIC_SetPriority+0x50>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f003 030f 	and.w	r3, r3, #15
 800054e:	3b04      	subs	r3, #4
 8000550:	0112      	lsls	r2, r2, #4
 8000552:	b2d2      	uxtb	r2, r2
 8000554:	440b      	add	r3, r1
 8000556:	761a      	strb	r2, [r3, #24]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000e100 	.word	0xe000e100
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800056c:	b480      	push	{r7}
 800056e:	b089      	sub	sp, #36	; 0x24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f003 0307 	and.w	r3, r3, #7
 800057e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	f1c3 0307 	rsb	r3, r3, #7
 8000586:	2b04      	cmp	r3, #4
 8000588:	bf28      	it	cs
 800058a:	2304      	movcs	r3, #4
 800058c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	3304      	adds	r3, #4
 8000592:	2b06      	cmp	r3, #6
 8000594:	d902      	bls.n	800059c <NVIC_EncodePriority+0x30>
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	3b03      	subs	r3, #3
 800059a:	e000      	b.n	800059e <NVIC_EncodePriority+0x32>
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	f04f 32ff 	mov.w	r2, #4294967295
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	43da      	mvns	r2, r3
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	401a      	ands	r2, r3
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b4:	f04f 31ff 	mov.w	r1, #4294967295
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	43d9      	mvns	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	4313      	orrs	r3, r2
         );
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3724      	adds	r7, #36	; 0x24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <LL_SYSCFG_SetEXTISource+0x58>)
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	3302      	adds	r3, #2
 80005e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	0c1b      	lsrs	r3, r3, #16
 80005ee:	43db      	mvns	r3, r3
 80005f0:	ea02 0103 	and.w	r1, r2, r3
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	fa93 f3a3 	rbit	r3, r3
 8000600:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	fab3 f383 	clz	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	461a      	mov	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	fa03 f202 	lsl.w	r2, r3, r2
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <LL_SYSCFG_SetEXTISource+0x58>)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	430a      	orrs	r2, r1
 800061a:	3302      	adds	r3, #2
 800061c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	40013800 	.word	0x40013800

08000630 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000630:	b480      	push	{r7}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	fa93 f3a3 	rbit	r3, r3
 800064a:	613b      	str	r3, [r7, #16]
  return result;
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	fab3 f383 	clz	r3, r3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	2103      	movs	r1, #3
 8000658:	fa01 f303 	lsl.w	r3, r1, r3
 800065c:	43db      	mvns	r3, r3
 800065e:	401a      	ands	r2, r3
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	fa93 f3a3 	rbit	r3, r3
 800066a:	61bb      	str	r3, [r7, #24]
  return result;
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	fab3 f383 	clz	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	fa01 f303 	lsl.w	r3, r1, r3
 800067c:	431a      	orrs	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	3724      	adds	r7, #36	; 0x24
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800068e:	b480      	push	{r7}
 8000690:	b089      	sub	sp, #36	; 0x24
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	68da      	ldr	r2, [r3, #12]
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	fa93 f3a3 	rbit	r3, r3
 80006a8:	613b      	str	r3, [r7, #16]
  return result;
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	fab3 f383 	clz	r3, r3
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	2103      	movs	r1, #3
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	43db      	mvns	r3, r3
 80006bc:	401a      	ands	r2, r3
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	fa93 f3a3 	rbit	r3, r3
 80006c8:	61bb      	str	r3, [r7, #24]
  return result;
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	fab3 f383 	clz	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	431a      	orrs	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	60da      	str	r2, [r3, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3724      	adds	r7, #36	; 0x24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	041a      	lsls	r2, r3, #16
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	619a      	str	r2, [r3, #24]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000718:	4907      	ldr	r1, [pc, #28]	; (8000738 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4013      	ands	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	40023800 	.word	0x40023800

0800073c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	463b      	mov	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800075c:	2080      	movs	r0, #128	; 0x80
 800075e:	f7ff ffd5 	bl	800070c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ffd2 	bl	800070c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000768:	2008      	movs	r0, #8
 800076a:	f7ff ffcf 	bl	800070c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LD1_Pin|LD2_Pin|LD3_Pin);
 800076e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000772:	4821      	ldr	r0, [pc, #132]	; (80007f8 <MX_GPIO_Init+0xbc>)
 8000774:	f7ff ffba 	bl	80006ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8000778:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ff29 	bl	80005d4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000786:	2301      	movs	r3, #1
 8000788:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800078a:	2300      	movs	r3, #0
 800078c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800078e:	2301      	movs	r3, #1
 8000790:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fa4e 	bl	8001c38 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN_GPIO_Port, BTN_Pin, LL_GPIO_PULL_NO);
 800079c:	2200      	movs	r2, #0
 800079e:	2101      	movs	r1, #1
 80007a0:	4816      	ldr	r0, [pc, #88]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007a2:	f7ff ff74 	bl	800068e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN_GPIO_Port, BTN_Pin, LL_GPIO_MODE_INPUT);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2101      	movs	r1, #1
 80007aa:	4814      	ldr	r0, [pc, #80]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007ac:	f7ff ff40 	bl	8000630 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin;
 80007b0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80007b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007b6:	2301      	movs	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c6:	463b      	mov	r3, r7
 80007c8:	4619      	mov	r1, r3
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <MX_GPIO_Init+0xbc>)
 80007cc:	f001 fbba 	bl	8001f44 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80007d0:	f7ff fe76 	bl	80004c0 <__NVIC_GetPriorityGrouping>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2200      	movs	r2, #0
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fec6 	bl	800056c <NVIC_EncodePriority>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4619      	mov	r1, r3
 80007e4:	2006      	movs	r0, #6
 80007e6:	f7ff fe97 	bl	8000518 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80007ea:	2006      	movs	r0, #6
 80007ec:	f7ff fe76 	bl	80004dc <__NVIC_EnableIRQ>

}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	40020000 	.word	0x40020000

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fbc4 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f80a 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff ff96 	bl	800073c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000810:	f000 fad6 	bl	8000dc0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000814:	f000 fb58 	bl	8000ec8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
//  timer_callback_register(sw_rtc_systick_update);
  sw_rtc_app_run();
 8000818:	f002 f8cc 	bl	80029b4 <sw_rtc_app_run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081c:	e7fe      	b.n	800081c <main+0x1c>
	...

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	; 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f916 	bl	8002a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a26      	ldr	r2, [pc, #152]	; (80008e8 <SystemClock_Config+0xc8>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemClock_Config+0xc8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a20      	ldr	r2, [pc, #128]	; (80008ec <SystemClock_Config+0xcc>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <SystemClock_Config+0xcc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000894:	2348      	movs	r3, #72	; 0x48
 8000896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fcef 	bl	8001288 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f81e 	bl	80008f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2102      	movs	r1, #2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 ff51 	bl	8001778 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008dc:	f000 f808 	bl	80008f0 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	; 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <LL_EXTI_DisableIT_0_31+0x24>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	43db      	mvns	r3, r3
 800095c:	4904      	ldr	r1, [pc, #16]	; (8000970 <LL_EXTI_DisableIT_0_31+0x24>)
 800095e:	4013      	ands	r3, r2
 8000960:	600b      	str	r3, [r1, #0]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40013c00 	.word	0x40013c00

08000974 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4013      	ands	r3, r2
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	429a      	cmp	r2, r3
 8000988:	bf0c      	ite	eq
 800098a:	2301      	moveq	r3, #1
 800098c:	2300      	movne	r3, #0
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40013c00 	.word	0x40013c00

080009a0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6153      	str	r3, [r2, #20]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40013c00 	.word	0x40013c00

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0c:	f000 fb12 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  sw_rtc_systick_update();
 8000a10:	f001 ffec 	bl	80029ec <sw_rtc_systick_update>
  if (__debouce_btn_en == 1)
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SysTick_Handler+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d101      	bne.n	8000a22 <SysTick_Handler+0x1a>
  {
	  debounce_handler();
 8000a1e:	f001 fe31 	bl	8002684 <debounce_handler>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000028 	.word	0x20000028

08000a2c <EXTI0_IRQHandler_ABC>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler_ABC(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff ff9f 	bl	8000974 <LL_EXTI_IsActiveFlag_0_31>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d008      	beq.n	8000a4e <EXTI0_IRQHandler_ABC+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff ffaf 	bl	80009a0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    /*First, disable EXTI Interrupt */
    LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_0);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff ff82 	bl	800094c <LL_EXTI_DisableIT_0_31>

    /* Enable deboucing process */
    __debouce_btn_en = 1;
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <EXTI0_IRQHandler_ABC+0x28>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000028 	.word	0x20000028

08000a58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* */
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  /* Invoke user callback */
	if (tim6_cb_ptr != NULL){
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <TIM6_DAC_IRQHandler+0x18>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <TIM6_DAC_IRQHandler+0x12>
		tim6_cb_ptr();
 8000a74:	4b02      	ldr	r3, [pc, #8]	; (8000a80 <TIM6_DAC_IRQHandler+0x18>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4798      	blx	r3
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000004c 	.word	0x2000004c

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_EnableIRQ>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db0b      	blt.n	8000aee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 021f 	and.w	r2, r3, #31
 8000adc:	4907      	ldr	r1, [pc, #28]	; (8000afc <__NVIC_EnableIRQ+0x38>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <__NVIC_SetPriority>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d01c      	beq.n	8000c26 <LL_TIM_OC_DisableFast+0x4a>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	d017      	beq.n	8000c22 <LL_TIM_OC_DisableFast+0x46>
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2b10      	cmp	r3, #16
 8000bf6:	d012      	beq.n	8000c1e <LL_TIM_OC_DisableFast+0x42>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b40      	cmp	r3, #64	; 0x40
 8000bfc:	d00d      	beq.n	8000c1a <LL_TIM_OC_DisableFast+0x3e>
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c04:	d007      	beq.n	8000c16 <LL_TIM_OC_DisableFast+0x3a>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0c:	d101      	bne.n	8000c12 <LL_TIM_OC_DisableFast+0x36>
 8000c0e:	2305      	movs	r3, #5
 8000c10:	e00a      	b.n	8000c28 <LL_TIM_OC_DisableFast+0x4c>
 8000c12:	2306      	movs	r3, #6
 8000c14:	e008      	b.n	8000c28 <LL_TIM_OC_DisableFast+0x4c>
 8000c16:	2304      	movs	r3, #4
 8000c18:	e006      	b.n	8000c28 <LL_TIM_OC_DisableFast+0x4c>
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e004      	b.n	8000c28 <LL_TIM_OC_DisableFast+0x4c>
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e002      	b.n	8000c28 <LL_TIM_OC_DisableFast+0x4c>
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <LL_TIM_OC_DisableFast+0x4c>
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3318      	adds	r3, #24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LL_TIM_OC_DisableFast+0x84>)
 8000c34:	5cd3      	ldrb	r3, [r2, r3]
 8000c36:	440b      	add	r3, r1
 8000c38:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	4908      	ldr	r1, [pc, #32]	; (8000c64 <LL_TIM_OC_DisableFast+0x88>)
 8000c42:	5ccb      	ldrb	r3, [r1, r3]
 8000c44:	4619      	mov	r1, r3
 8000c46:	2304      	movs	r3, #4
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	601a      	str	r2, [r3, #0]

}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	08002a98 	.word	0x08002a98
 8000c64:	08002aa0 	.word	0x08002aa0

08000c68 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d01c      	beq.n	8000cb2 <LL_TIM_OC_EnablePreload+0x4a>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	d017      	beq.n	8000cae <LL_TIM_OC_EnablePreload+0x46>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b10      	cmp	r3, #16
 8000c82:	d012      	beq.n	8000caa <LL_TIM_OC_EnablePreload+0x42>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b40      	cmp	r3, #64	; 0x40
 8000c88:	d00d      	beq.n	8000ca6 <LL_TIM_OC_EnablePreload+0x3e>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c90:	d007      	beq.n	8000ca2 <LL_TIM_OC_EnablePreload+0x3a>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c98:	d101      	bne.n	8000c9e <LL_TIM_OC_EnablePreload+0x36>
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	e00a      	b.n	8000cb4 <LL_TIM_OC_EnablePreload+0x4c>
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	e008      	b.n	8000cb4 <LL_TIM_OC_EnablePreload+0x4c>
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	e006      	b.n	8000cb4 <LL_TIM_OC_EnablePreload+0x4c>
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e004      	b.n	8000cb4 <LL_TIM_OC_EnablePreload+0x4c>
 8000caa:	2302      	movs	r3, #2
 8000cac:	e002      	b.n	8000cb4 <LL_TIM_OC_EnablePreload+0x4c>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <LL_TIM_OC_EnablePreload+0x4c>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3318      	adds	r3, #24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <LL_TIM_OC_EnablePreload+0x80>)
 8000cc0:	5cd3      	ldrb	r3, [r2, r3]
 8000cc2:	440b      	add	r3, r1
 8000cc4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <LL_TIM_OC_EnablePreload+0x84>)
 8000cce:	5ccb      	ldrb	r3, [r1, r3]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	601a      	str	r2, [r3, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	08002a98 	.word	0x08002a98
 8000cec:	08002aa0 	.word	0x08002aa0

08000cf0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d02:	f023 0307 	bic.w	r3, r3, #7
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	605a      	str	r2, [r3, #4]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	609a      	str	r2, [r3, #8]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_AHB1_GRP1_EnableClock>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40023800 	.word	0x40023800

08000d90 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4013      	ands	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <MX_TIM4_Init>:

/* USER CODE END 0 */

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000dc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2220      	movs	r2, #32
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 fe3e 	bl	8002a60 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8000df4:	2004      	movs	r0, #4
 8000df6:	f7ff ffcb 	bl	8000d90 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000dfa:	f7ff fe55 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fea5 	bl	8000b54 <NVIC_EncodePriority>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	201e      	movs	r0, #30
 8000e10:	f7ff fe76 	bl	8000b00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8000e14:	201e      	movs	r0, #30
 8000e16:	f7ff fe55 	bl	8000ac4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 36000;
 8000e1a:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8000e1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e20:	2300      	movs	r3, #0
 8000e22:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 200;
 8000e24:	23c8      	movs	r3, #200	; 0xc8
 8000e26:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8000e2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e30:	4619      	mov	r1, r3
 8000e32:	4823      	ldr	r0, [pc, #140]	; (8000ec0 <MX_TIM4_Init+0x100>)
 8000e34:	f001 f96c 	bl	8002110 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8000e38:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <MX_TIM4_Init+0x100>)
 8000e3a:	f7ff febe 	bl	8000bba <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	481f      	ldr	r0, [pc, #124]	; (8000ec0 <MX_TIM4_Init+0x100>)
 8000e42:	f7ff ff55 	bl	8000cf0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 8000e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4a:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <MX_TIM4_Init+0x100>)
 8000e4c:	f7ff ff0c 	bl	8000c68 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000e50:	2360      	movs	r3, #96	; 0x60
 8000e52:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 50;
 8000e5c:	2332      	movs	r3, #50	; 0x32
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6e:	4814      	ldr	r0, [pc, #80]	; (8000ec0 <MX_TIM4_Init+0x100>)
 8000e70:	f001 f9e8 	bl	8002244 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8000e74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e78:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <MX_TIM4_Init+0x100>)
 8000e7a:	f7ff feaf 	bl	8000bdc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8000e7e:	2100      	movs	r1, #0
 8000e80:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <MX_TIM4_Init+0x100>)
 8000e82:	f7ff ff4a 	bl	8000d1a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <MX_TIM4_Init+0x100>)
 8000e88:	f7ff ff5a 	bl	8000d40 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000e8c:	2008      	movs	r0, #8
 8000e8e:	f7ff ff67 	bl	8000d60 <LL_AHB1_GRP1_EnableClock>
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_TIM4_Init+0x104>)
 8000eb2:	f001 f847 	bl	8001f44 <LL_GPIO_Init>

}
 8000eb6:	bf00      	nop
 8000eb8:	3750      	adds	r7, #80	; 0x50
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40000800 	.word	0x40000800
 8000ec4:	40020c00 	.word	0x40020c00

08000ec8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000edc:	2010      	movs	r0, #16
 8000ede:	f7ff ff57 	bl	8000d90 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ee2:	f7ff fde1 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fe31 	bl	8000b54 <NVIC_EncodePriority>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	2036      	movs	r0, #54	; 0x36
 8000ef8:	f7ff fe02 	bl	8000b00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000efc:	2036      	movs	r0, #54	; 0x36
 8000efe:	f7ff fde1 	bl	8000ac4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 3599;
 8000f02:	f640 630f 	movw	r3, #3599	; 0xe0f
 8000f06:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 8000f0c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f10:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <MX_TIM6_Init+0x70>)
 8000f18:	f001 f8fa 	bl	8002110 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM6);
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_TIM6_Init+0x70>)
 8000f1e:	f7ff fe4c 	bl	8000bba <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8000f22:	2100      	movs	r1, #0
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_TIM6_Init+0x70>)
 8000f26:	f7ff fef8 	bl	8000d1a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <MX_TIM6_Init+0x70>)
 8000f2c:	f7ff ff08 	bl	8000d40 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40001000 	.word	0x40001000

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f66:	f7ff fd8d 	bl	8000a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f001 fd55 	bl	8002a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fc47 	bl	8000800 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f80:	08002ab8 	.word	0x08002ab8
  ldr r2, =_sbss
 8000f84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f88:	20000054 	.word	0x20000054

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f931 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fc9a 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f93b 	bl	800126e <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f911 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	20000050 	.word	0x20000050

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000050 	.word	0x20000050

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_SetPriority>:
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff47 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff5c 	bl	8001104 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffb0 	bl	80011dc <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e264      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d075      	beq.n	8001392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	4ba3      	ldr	r3, [pc, #652]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00c      	beq.n	80012cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4ba0      	ldr	r3, [pc, #640]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b9d      	ldr	r3, [pc, #628]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ca:	d10b      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	4b99      	ldr	r3, [pc, #612]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d05b      	beq.n	8001390 <HAL_RCC_OscConfig+0x108>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d157      	bne.n	8001390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e23f      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x74>
 80012ee:	4b91      	ldr	r3, [pc, #580]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a90      	ldr	r2, [pc, #576]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x98>
 8001306:	4b8b      	ldr	r3, [pc, #556]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a8a      	ldr	r2, [pc, #552]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b88      	ldr	r3, [pc, #544]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a87      	ldr	r2, [pc, #540]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 8001320:	4b84      	ldr	r3, [pc, #528]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a83      	ldr	r2, [pc, #524]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b81      	ldr	r3, [pc, #516]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a80      	ldr	r2, [pc, #512]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fe8c 	bl	800105c <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fe88 	bl	800105c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e204      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xc0>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fe78 	bl	800105c <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fe74 	bl	800105c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1f0      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b6c      	ldr	r3, [pc, #432]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	4b65      	ldr	r3, [pc, #404]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b62      	ldr	r3, [pc, #392]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1c4      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b56      	ldr	r3, [pc, #344]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4952      	ldr	r1, [pc, #328]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <HAL_RCC_OscConfig+0x2b0>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fe2d 	bl	800105c <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fe29 	bl	800105c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1a5      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b46      	ldr	r3, [pc, #280]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b43      	ldr	r3, [pc, #268]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4940      	ldr	r1, [pc, #256]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <HAL_RCC_OscConfig+0x2b0>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fe0c 	bl	800105c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fe08 	bl	800105c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e184      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b36      	ldr	r3, [pc, #216]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d030      	beq.n	80014d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_RCC_OscConfig+0x2b4>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fdec 	bl	800105c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fde8 	bl	800105c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e164      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x200>
 80014a6:	e015      	b.n	80014d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_RCC_OscConfig+0x2b4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fdd5 	bl	800105c <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fdd1 	bl	800105c <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e14d      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80014ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a0 	beq.w	8001622 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10f      	bne.n	8001512 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150e:	2301      	movs	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_OscConfig+0x2b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d121      	bne.n	8001562 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_RCC_OscConfig+0x2b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_RCC_OscConfig+0x2b8>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152a:	f7ff fd97 	bl	800105c <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	e011      	b.n	8001556 <HAL_RCC_OscConfig+0x2ce>
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	42470000 	.word	0x42470000
 800153c:	42470e80 	.word	0x42470e80
 8001540:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001544:	f7ff fd8a 	bl	800105c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e106      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b85      	ldr	r3, [pc, #532]	; (800176c <HAL_RCC_OscConfig+0x4e4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d106      	bne.n	8001578 <HAL_RCC_OscConfig+0x2f0>
 800156a:	4b81      	ldr	r3, [pc, #516]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	4a80      	ldr	r2, [pc, #512]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6713      	str	r3, [r2, #112]	; 0x70
 8001576:	e01c      	b.n	80015b2 <HAL_RCC_OscConfig+0x32a>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b05      	cmp	r3, #5
 800157e:	d10c      	bne.n	800159a <HAL_RCC_OscConfig+0x312>
 8001580:	4b7b      	ldr	r3, [pc, #492]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a7a      	ldr	r2, [pc, #488]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	4b78      	ldr	r3, [pc, #480]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a77      	ldr	r2, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
 8001598:	e00b      	b.n	80015b2 <HAL_RCC_OscConfig+0x32a>
 800159a:	4b75      	ldr	r3, [pc, #468]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a74      	ldr	r2, [pc, #464]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
 80015a6:	4b72      	ldr	r3, [pc, #456]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a71      	ldr	r2, [pc, #452]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d015      	beq.n	80015e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff fd4f 	bl	800105c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff fd4b 	bl	800105c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0c5      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ee      	beq.n	80015c2 <HAL_RCC_OscConfig+0x33a>
 80015e4:	e014      	b.n	8001610 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fd39 	bl	800105c <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff fd35 	bl	800105c <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0af      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	4b5a      	ldr	r3, [pc, #360]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ee      	bne.n	80015ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d105      	bne.n	8001622 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001616:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a55      	ldr	r2, [pc, #340]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 800161c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 809b 	beq.w	8001762 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b08      	cmp	r3, #8
 8001636:	d05c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d141      	bne.n	80016c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <HAL_RCC_OscConfig+0x4ec>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fd09 	bl	800105c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fd05 	bl	800105c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e081      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69da      	ldr	r2, [r3, #28]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	019b      	lsls	r3, r3, #6
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	3b01      	subs	r3, #1
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	061b      	lsls	r3, r3, #24
 8001690:	4937      	ldr	r1, [pc, #220]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <HAL_RCC_OscConfig+0x4ec>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fcde 	bl	800105c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fcda 	bl	800105c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e056      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x41c>
 80016c2:	e04e      	b.n	8001762 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_RCC_OscConfig+0x4ec>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fcc7 	bl	800105c <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fcc3 	bl	800105c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e03f      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x44a>
 80016f0:	e037      	b.n	8001762 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e032      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_RCC_OscConfig+0x4e8>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d028      	beq.n	800175e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d121      	bne.n	800175e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d11a      	bne.n	800175e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800172e:	4013      	ands	r3, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001734:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001736:	4293      	cmp	r3, r2
 8001738:	d111      	bne.n	800175e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	085b      	lsrs	r3, r3, #1
 8001746:	3b01      	subs	r3, #1
 8001748:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d107      	bne.n	800175e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40007000 	.word	0x40007000
 8001770:	40023800 	.word	0x40023800
 8001774:	42470060 	.word	0x42470060

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0cc      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d90c      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d044      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d119      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e067      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4934      	ldr	r1, [pc, #208]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff fbf8 	bl	800105c <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff fbf4 	bl	800105c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d20c      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f821 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001902:	4602      	mov	r2, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	490a      	ldr	r1, [pc, #40]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fb58 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00
 8001934:	40023800 	.word	0x40023800
 8001938:	08002a88 	.word	0x08002a88
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195c:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d00d      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x40>
 8001968:	2b08      	cmp	r3, #8
 800196a:	f200 80bd 	bhi.w	8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x34>
 8001972:	2b04      	cmp	r3, #4
 8001974:	d003      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x3a>
 8001976:	e0b7      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b61      	ldr	r3, [pc, #388]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800197a:	60bb      	str	r3, [r7, #8]
       break;
 800197c:	e0b7      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197e:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001980:	60bb      	str	r3, [r7, #8]
      break;
 8001982:	e0b4      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001984:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800198c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198e:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d04d      	beq.n	8001a36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	4b58      	ldr	r3, [pc, #352]	; (8001afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	461a      	mov	r2, r3
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	ea02 0800 	and.w	r8, r2, r0
 80019b2:	ea03 0901 	and.w	r9, r3, r1
 80019b6:	4640      	mov	r0, r8
 80019b8:	4649      	mov	r1, r9
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	014b      	lsls	r3, r1, #5
 80019c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019c8:	0142      	lsls	r2, r0, #5
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	ebb0 0008 	subs.w	r0, r0, r8
 80019d2:	eb61 0109 	sbc.w	r1, r1, r9
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	018b      	lsls	r3, r1, #6
 80019e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019e4:	0182      	lsls	r2, r0, #6
 80019e6:	1a12      	subs	r2, r2, r0
 80019e8:	eb63 0301 	sbc.w	r3, r3, r1
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	00d9      	lsls	r1, r3, #3
 80019f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019fa:	00d0      	lsls	r0, r2, #3
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	eb12 0208 	adds.w	r2, r2, r8
 8001a04:	eb43 0309 	adc.w	r3, r3, r9
 8001a08:	f04f 0000 	mov.w	r0, #0
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	0259      	lsls	r1, r3, #9
 8001a12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a16:	0250      	lsls	r0, r2, #9
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	461a      	mov	r2, r3
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	f7fe fbce 	bl	80001c8 <__aeabi_uldivmod>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4613      	mov	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	e04a      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a36:	4b31      	ldr	r3, [pc, #196]	; (8001afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	099b      	lsrs	r3, r3, #6
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a46:	f04f 0100 	mov.w	r1, #0
 8001a4a:	ea02 0400 	and.w	r4, r2, r0
 8001a4e:	ea03 0501 	and.w	r5, r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	014b      	lsls	r3, r1, #5
 8001a60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a64:	0142      	lsls	r2, r0, #5
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	1b00      	subs	r0, r0, r4
 8001a6c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	018b      	lsls	r3, r1, #6
 8001a7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a7e:	0182      	lsls	r2, r0, #6
 8001a80:	1a12      	subs	r2, r2, r0
 8001a82:	eb63 0301 	sbc.w	r3, r3, r1
 8001a86:	f04f 0000 	mov.w	r0, #0
 8001a8a:	f04f 0100 	mov.w	r1, #0
 8001a8e:	00d9      	lsls	r1, r3, #3
 8001a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a94:	00d0      	lsls	r0, r2, #3
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	1912      	adds	r2, r2, r4
 8001a9c:	eb45 0303 	adc.w	r3, r5, r3
 8001aa0:	f04f 0000 	mov.w	r0, #0
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	0299      	lsls	r1, r3, #10
 8001aaa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001aae:	0290      	lsls	r0, r2, #10
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	f7fe fb82 	bl	80001c8 <__aeabi_uldivmod>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	60bb      	str	r3, [r7, #8]
      break;
 8001ae6:	e002      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001aea:	60bb      	str	r3, [r7, #8]
      break;
 8001aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aee:	68bb      	ldr	r3, [r7, #8]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	007a1200 	.word	0x007a1200

08001b08 <LL_EXTI_EnableIT_0_31>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4904      	ldr	r1, [pc, #16]	; (8001b28 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40013c00 	.word	0x40013c00

08001b2c <LL_EXTI_DisableIT_0_31>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <LL_EXTI_DisableIT_0_31+0x24>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	4904      	ldr	r1, [pc, #16]	; (8001b50 <LL_EXTI_DisableIT_0_31+0x24>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40013c00 	.word	0x40013c00

08001b54 <LL_EXTI_EnableEvent_0_31>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4904      	ldr	r1, [pc, #16]	; (8001b74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40013c00 	.word	0x40013c00

08001b78 <LL_EXTI_DisableEvent_0_31>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4904      	ldr	r1, [pc, #16]	; (8001bc0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40013c00 	.word	0x40013c00

08001bc4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	4904      	ldr	r1, [pc, #16]	; (8001be8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40013c00 	.word	0x40013c00

08001bec <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4904      	ldr	r1, [pc, #16]	; (8001c0c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	4904      	ldr	r1, [pc, #16]	; (8001c34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	60cb      	str	r3, [r1, #12]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40013c00 	.word	0x40013c00

08001c38 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	791b      	ldrb	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d065      	beq.n	8001d18 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d06c      	beq.n	8001d2e <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	795b      	ldrb	r3, [r3, #5]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d01c      	beq.n	8001c96 <LL_EXTI_Init+0x5e>
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	dc25      	bgt.n	8001cac <LL_EXTI_Init+0x74>
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <LL_EXTI_Init+0x32>
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d00b      	beq.n	8001c80 <LL_EXTI_Init+0x48>
 8001c68:	e020      	b.n	8001cac <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff82 	bl	8001b78 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff45 	bl	8001b08 <LL_EXTI_EnableIT_0_31>
          break;
 8001c7e:	e018      	b.n	8001cb2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff51 	bl	8001b2c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff60 	bl	8001b54 <LL_EXTI_EnableEvent_0_31>
          break;
 8001c94:	e00d      	b.n	8001cb2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff34 	bl	8001b08 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff55 	bl	8001b54 <LL_EXTI_EnableEvent_0_31>
          break;
 8001caa:	e002      	b.n	8001cb2 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
          break;
 8001cb0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	799b      	ldrb	r3, [r3, #6]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d039      	beq.n	8001d2e <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	799b      	ldrb	r3, [r3, #6]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d01c      	beq.n	8001cfc <LL_EXTI_Init+0xc4>
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	dc25      	bgt.n	8001d12 <LL_EXTI_Init+0xda>
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d002      	beq.n	8001cd0 <LL_EXTI_Init+0x98>
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d00b      	beq.n	8001ce6 <LL_EXTI_Init+0xae>
 8001cce:	e020      	b.n	8001d12 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff9b 	bl	8001c10 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff5e 	bl	8001ba0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001ce4:	e024      	b.n	8001d30 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff6a 	bl	8001bc4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff79 	bl	8001bec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001cfa:	e019      	b.n	8001d30 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff4d 	bl	8001ba0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff6e 	bl	8001bec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001d10:	e00e      	b.n	8001d30 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
            break;
 8001d16:	e00b      	b.n	8001d30 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff05 	bl	8001b2c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff26 	bl	8001b78 <LL_EXTI_DisableEvent_0_31>
 8001d2c:	e000      	b.n	8001d30 <LL_EXTI_Init+0xf8>
      }
 8001d2e:	bf00      	nop
  }
  return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <LL_GPIO_SetPinMode>:
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b089      	sub	sp, #36	; 0x24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	613b      	str	r3, [r7, #16]
  return result;
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2103      	movs	r1, #3
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	401a      	ands	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	61bb      	str	r3, [r7, #24]
  return result;
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	431a      	orrs	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	3724      	adds	r7, #36	; 0x24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_GPIO_SetPinOutputType>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	431a      	orrs	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	605a      	str	r2, [r3, #4]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_GPIO_SetPinSpeed>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	613b      	str	r3, [r7, #16]
  return result;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2103      	movs	r1, #3
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	401a      	ands	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	61bb      	str	r3, [r7, #24]
  return result;
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	609a      	str	r2, [r3, #8]
}
 8001e1a:	bf00      	nop
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_GPIO_SetPinPull>:
{
 8001e26:	b480      	push	{r7}
 8001e28:	b089      	sub	sp, #36	; 0x24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	613b      	str	r3, [r7, #16]
  return result;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	401a      	ands	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	61bb      	str	r3, [r7, #24]
  return result;
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	60da      	str	r2, [r3, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3724      	adds	r7, #36	; 0x24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_GPIO_SetAFPin_0_7>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a1a      	ldr	r2, [r3, #32]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	613b      	str	r3, [r7, #16]
  return result;
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	210f      	movs	r1, #15
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	61bb      	str	r3, [r7, #24]
  return result;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	621a      	str	r2, [r3, #32]
}
 8001ed6:	bf00      	nop
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_GPIO_SetAFPin_8_15>:
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b089      	sub	sp, #36	; 0x24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	613b      	str	r3, [r7, #16]
  return result;
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	61bb      	str	r3, [r7, #24]
  return result;
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	431a      	orrs	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f38:	bf00      	nop
 8001f3a:	3724      	adds	r7, #36	; 0x24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	613b      	str	r3, [r7, #16]
  return result;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f6e:	e050      	b.n	8002012 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2101      	movs	r1, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d042      	beq.n	800200c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d003      	beq.n	8001f96 <LL_GPIO_Init+0x52>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d10d      	bne.n	8001fb2 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	69b9      	ldr	r1, [r7, #24]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff12 	bl	8001dc8 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff fef3 	bl	8001d98 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	69b9      	ldr	r1, [r7, #24]
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ff33 	bl	8001e26 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d11a      	bne.n	8001ffe <LL_GPIO_Init+0xba>
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	60bb      	str	r3, [r7, #8]
  return result;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b07      	cmp	r3, #7
 8001fde:	d807      	bhi.n	8001ff0 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff4b 	bl	8001e84 <LL_GPIO_SetAFPin_0_7>
 8001fee:	e006      	b.n	8001ffe <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff72 	bl	8001ee2 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	461a      	mov	r2, r3
 8002004:	69b9      	ldr	r1, [r7, #24]
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fe97 	bl	8001d3a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3301      	adds	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1a7      	bne.n	8001f70 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <LL_TIM_SetPrescaler>:
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	629a      	str	r2, [r3, #40]	; 0x28
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_TIM_SetAutoReload>:
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_TIM_SetRepetitionCounter>:
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_TIM_OC_SetCompareCH1>:
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_TIM_OC_SetCompareCH2>:
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_TIM_OC_SetCompareCH3>:
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_TIM_OC_SetCompareCH4>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	615a      	str	r2, [r3, #20]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <LL_TIM_Init+0x108>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <LL_TIM_Init+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212e:	d00f      	beq.n	8002150 <LL_TIM_Init+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3a      	ldr	r2, [pc, #232]	; (800221c <LL_TIM_Init+0x10c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00b      	beq.n	8002150 <LL_TIM_Init+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a39      	ldr	r2, [pc, #228]	; (8002220 <LL_TIM_Init+0x110>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <LL_TIM_Init+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a38      	ldr	r2, [pc, #224]	; (8002224 <LL_TIM_Init+0x114>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d003      	beq.n	8002150 <LL_TIM_Init+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a37      	ldr	r2, [pc, #220]	; (8002228 <LL_TIM_Init+0x118>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d106      	bne.n	800215e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2d      	ldr	r2, [pc, #180]	; (8002218 <LL_TIM_Init+0x108>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02b      	beq.n	80021be <LL_TIM_Init+0xae>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d027      	beq.n	80021be <LL_TIM_Init+0xae>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2a      	ldr	r2, [pc, #168]	; (800221c <LL_TIM_Init+0x10c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d023      	beq.n	80021be <LL_TIM_Init+0xae>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a29      	ldr	r2, [pc, #164]	; (8002220 <LL_TIM_Init+0x110>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <LL_TIM_Init+0xae>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a28      	ldr	r2, [pc, #160]	; (8002224 <LL_TIM_Init+0x114>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01b      	beq.n	80021be <LL_TIM_Init+0xae>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <LL_TIM_Init+0x118>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d017      	beq.n	80021be <LL_TIM_Init+0xae>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a26      	ldr	r2, [pc, #152]	; (800222c <LL_TIM_Init+0x11c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <LL_TIM_Init+0xae>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a25      	ldr	r2, [pc, #148]	; (8002230 <LL_TIM_Init+0x120>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00f      	beq.n	80021be <LL_TIM_Init+0xae>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a24      	ldr	r2, [pc, #144]	; (8002234 <LL_TIM_Init+0x124>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00b      	beq.n	80021be <LL_TIM_Init+0xae>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a23      	ldr	r2, [pc, #140]	; (8002238 <LL_TIM_Init+0x128>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <LL_TIM_Init+0xae>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a22      	ldr	r2, [pc, #136]	; (800223c <LL_TIM_Init+0x12c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d003      	beq.n	80021be <LL_TIM_Init+0xae>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a21      	ldr	r2, [pc, #132]	; (8002240 <LL_TIM_Init+0x130>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d106      	bne.n	80021cc <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff34 	bl	8002046 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff20 	bl	800202a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <LL_TIM_Init+0x108>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <LL_TIM_Init+0xea>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <LL_TIM_Init+0x118>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d105      	bne.n	8002206 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	4619      	mov	r1, r3
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ff2e 	bl	8002062 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ff71 	bl	80020ee <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40010000 	.word	0x40010000
 800221c:	40000400 	.word	0x40000400
 8002220:	40000800 	.word	0x40000800
 8002224:	40000c00 	.word	0x40000c00
 8002228:	40010400 	.word	0x40010400
 800222c:	40014000 	.word	0x40014000
 8002230:	40014400 	.word	0x40014400
 8002234:	40014800 	.word	0x40014800
 8002238:	40001800 	.word	0x40001800
 800223c:	40001c00 	.word	0x40001c00
 8002240:	40002000 	.word	0x40002000

08002244 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225a:	d027      	beq.n	80022ac <LL_TIM_OC_Init+0x68>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002262:	d82a      	bhi.n	80022ba <LL_TIM_OC_Init+0x76>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226a:	d018      	beq.n	800229e <LL_TIM_OC_Init+0x5a>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002272:	d822      	bhi.n	80022ba <LL_TIM_OC_Init+0x76>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d003      	beq.n	8002282 <LL_TIM_OC_Init+0x3e>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b10      	cmp	r3, #16
 800227e:	d007      	beq.n	8002290 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002280:	e01b      	b.n	80022ba <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f81f 	bl	80022c8 <OC1Config>
 800228a:	4603      	mov	r3, r0
 800228c:	75fb      	strb	r3, [r7, #23]
      break;
 800228e:	e015      	b.n	80022bc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f884 	bl	80023a0 <OC2Config>
 8002298:	4603      	mov	r3, r0
 800229a:	75fb      	strb	r3, [r7, #23]
      break;
 800229c:	e00e      	b.n	80022bc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f8ed 	bl	8002480 <OC3Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	75fb      	strb	r3, [r7, #23]
      break;
 80022aa:	e007      	b.n	80022bc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f956 	bl	8002560 <OC4Config>
 80022b4:	4603      	mov	r3, r0
 80022b6:	75fb      	strb	r3, [r7, #23]
      break;
 80022b8:	e000      	b.n	80022bc <LL_TIM_OC_Init+0x78>
      break;
 80022ba:	bf00      	nop
  }

  return result;
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	f023 0201 	bic.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 0303 	bic.w	r3, r3, #3
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f023 0202 	bic.w	r2, r3, #2
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f023 0201 	bic.w	r2, r3, #1
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <OC1Config+0xd0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d003      	beq.n	8002332 <OC1Config+0x6a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1b      	ldr	r2, [pc, #108]	; (800239c <OC1Config+0xd4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11e      	bne.n	8002370 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f023 0208 	bic.w	r2, r3, #8
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f023 0204 	bic.w	r2, r3, #4
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fe7b 	bl	800207e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010000 	.word	0x40010000
 800239c:	40010400 	.word	0x40010400

080023a0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	f023 0210 	bic.w	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0220 	bic.w	r2, r3, #32
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f023 0210 	bic.w	r2, r3, #16
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <OC2Config+0xd8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <OC2Config+0x70>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a1c      	ldr	r2, [pc, #112]	; (800247c <OC2Config+0xdc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d11f      	bne.n	8002450 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	019b      	lsls	r3, r3, #6
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	019b      	lsls	r3, r3, #6
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fe19 	bl	800209a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40010000 	.word	0x40010000
 800247c:	40010400 	.word	0x40010400

08002480 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <OC3Config+0xd8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d003      	beq.n	80024ee <OC3Config+0x6e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1c      	ldr	r2, [pc, #112]	; (800255c <OC3Config+0xdc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d11f      	bne.n	800252e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	029b      	lsls	r3, r3, #10
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	015b      	lsls	r3, r3, #5
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fdb8 	bl	80020b6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40010000 	.word	0x40010000
 800255c:	40010400 	.word	0x40010400

08002560 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	031b      	lsls	r3, r3, #12
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	031b      	lsls	r3, r3, #12
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <OC4Config+0xa8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d003      	beq.n	80025d0 <OC4Config+0x70>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a10      	ldr	r2, [pc, #64]	; (800260c <OC4Config+0xac>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d107      	bne.n	80025e0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	019b      	lsls	r3, r3, #6
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fd6d 	bl	80020d2 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40010000 	.word	0x40010000
 800260c:	40010400 	.word	0x40010400

08002610 <LL_EXTI_EnableIT_0_31>:
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <LL_EXTI_EnableIT_0_31+0x20>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4904      	ldr	r1, [pc, #16]	; (8002630 <LL_EXTI_EnableIT_0_31+0x20>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40013c00 	.word	0x40013c00

08002634 <LL_GPIO_IsInputPinSet>:
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	4013      	ands	r3, r2
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <_debounce_restart>:

extern uint8_t volatile __debouce_btn_en;
volatile uint16_t       __debounce_timeout = 0;

void _debounce_restart (void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	StatoIn1 = 3;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <_debounce_restart+0x1c>)
 8002666:	2203      	movs	r2, #3
 8002668:	701a      	strb	r2, [r3, #0]
	__debouce_btn_en = 0; /* Stop checking debouncing called in systick timer*/
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <_debounce_restart+0x20>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
	/* Re-enable exti interrupt */
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_0);
 8002670:	2001      	movs	r0, #1
 8002672:	f7ff ffcd 	bl	8002610 <LL_EXTI_EnableIT_0_31>
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000009 	.word	0x20000009
 8002680:	20000028 	.word	0x20000028

08002684 <debounce_handler>:

void debounce_handler (void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	In1 = LL_GPIO_IsInputPinSet(BTN_GPIO_Port, BTN_Pin);
 8002688:	2101      	movs	r1, #1
 800268a:	4823      	ldr	r0, [pc, #140]	; (8002718 <debounce_handler+0x94>)
 800268c:	f7ff ffd2 	bl	8002634 <LL_GPIO_IsInputPinSet>
 8002690:	4603      	mov	r3, r0
 8002692:	b2da      	uxtb	r2, r3
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <debounce_handler+0x98>)
 8002696:	701a      	strb	r2, [r3, #0]

	if (In1 == 0)
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <debounce_handler+0x98>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d115      	bne.n	80026cc <debounce_handler+0x48>
	{
		In1_0++;
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <debounce_handler+0x9c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <debounce_handler+0x9c>)
 80026aa:	701a      	strb	r2, [r3, #0]
		In1_1 = 0;
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <debounce_handler+0xa0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
		if (In1_0 >= REF_DEBOUNCE_PERIOD)
 80026b2:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <debounce_handler+0x9c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2bc7      	cmp	r3, #199	; 0xc7
 80026b8:	d91d      	bls.n	80026f6 <debounce_handler+0x72>
		{
			In1_0 = REF_DEBOUNCE_PERIOD + 1;
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <debounce_handler+0x9c>)
 80026bc:	22c9      	movs	r2, #201	; 0xc9
 80026be:	701a      	strb	r2, [r3, #0]
			StatoIn1 = 0;
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <debounce_handler+0xa4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
			_debounce_restart();
 80026c6:	f7ff ffcb 	bl	8002660 <_debounce_restart>
 80026ca:	e014      	b.n	80026f6 <debounce_handler+0x72>
		}
	}
	else
	{
		In1_0 = 0;
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <debounce_handler+0x9c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
		In1_1++;
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <debounce_handler+0xa0>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <debounce_handler+0xa0>)
 80026dc:	701a      	strb	r2, [r3, #0]
		if (In1_1 >= REF_DEBOUNCE_PERIOD)
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <debounce_handler+0xa0>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2bc7      	cmp	r3, #199	; 0xc7
 80026e4:	d907      	bls.n	80026f6 <debounce_handler+0x72>
		{
			In1_1 = REF_DEBOUNCE_PERIOD + 1;
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <debounce_handler+0xa0>)
 80026e8:	22c9      	movs	r2, #201	; 0xc9
 80026ea:	701a      	strb	r2, [r3, #0]
			StatoIn1 = 1;
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <debounce_handler+0xa4>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
//			LL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			_debounce_restart();
 80026f2:	f7ff ffb5 	bl	8002660 <_debounce_restart>
		}
	}

	/* Handle timeout */
	if ( __debounce_timeout++ > REF_DEBOUNCE_TIMEOUT_CNT )
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <debounce_handler+0xa8>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	b291      	uxth	r1, r2
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <debounce_handler+0xa8>)
 8002702:	8011      	strh	r1, [r2, #0]
 8002704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002708:	d904      	bls.n	8002714 <debounce_handler+0x90>
	{
		__debounce_timeout = 0;
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <debounce_handler+0xa8>)
 800270c:	2200      	movs	r2, #0
 800270e:	801a      	strh	r2, [r3, #0]
		_debounce_restart();
 8002710:	f7ff ffa6 	bl	8002660 <_debounce_restart>
	}
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40020000 	.word	0x40020000
 800271c:	2000000a 	.word	0x2000000a
 8002720:	20000029 	.word	0x20000029
 8002724:	2000002a 	.word	0x2000002a
 8002728:	20000009 	.word	0x20000009
 800272c:	2000002c 	.word	0x2000002c

08002730 <sw_rtc_update>:

/**
 * Update and calculate time.
 */
void sw_rtc_update( void )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
	if(++t.second == 60)
 8002734:	4b48      	ldr	r3, [pc, #288]	; (8002858 <sw_rtc_update+0x128>)
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b46      	ldr	r3, [pc, #280]	; (8002858 <sw_rtc_update+0x128>)
 800273e:	801a      	strh	r2, [r3, #0]
 8002740:	4b45      	ldr	r3, [pc, #276]	; (8002858 <sw_rtc_update+0x128>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	2b3c      	cmp	r3, #60	; 0x3c
 8002746:	f040 8084 	bne.w	8002852 <sw_rtc_update+0x122>
	{
		t.second = 0;
 800274a:	4b43      	ldr	r3, [pc, #268]	; (8002858 <sw_rtc_update+0x128>)
 800274c:	2200      	movs	r2, #0
 800274e:	801a      	strh	r2, [r3, #0]

		if(++t.minute == 60)
 8002750:	4b41      	ldr	r3, [pc, #260]	; (8002858 <sw_rtc_update+0x128>)
 8002752:	885b      	ldrh	r3, [r3, #2]
 8002754:	3301      	adds	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <sw_rtc_update+0x128>)
 800275a:	805a      	strh	r2, [r3, #2]
 800275c:	4b3e      	ldr	r3, [pc, #248]	; (8002858 <sw_rtc_update+0x128>)
 800275e:	885b      	ldrh	r3, [r3, #2]
 8002760:	2b3c      	cmp	r3, #60	; 0x3c
 8002762:	d176      	bne.n	8002852 <sw_rtc_update+0x122>
		{
			t.minute = 0;
 8002764:	4b3c      	ldr	r3, [pc, #240]	; (8002858 <sw_rtc_update+0x128>)
 8002766:	2200      	movs	r2, #0
 8002768:	805a      	strh	r2, [r3, #2]

			if(++t.hour == 24)
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <sw_rtc_update+0x128>)
 800276c:	889b      	ldrh	r3, [r3, #4]
 800276e:	3301      	adds	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	4b39      	ldr	r3, [pc, #228]	; (8002858 <sw_rtc_update+0x128>)
 8002774:	809a      	strh	r2, [r3, #4]
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <sw_rtc_update+0x128>)
 8002778:	889b      	ldrh	r3, [r3, #4]
 800277a:	2b18      	cmp	r3, #24
 800277c:	d169      	bne.n	8002852 <sw_rtc_update+0x122>
			{
				t.hour = 0;
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <sw_rtc_update+0x128>)
 8002780:	2200      	movs	r2, #0
 8002782:	809a      	strh	r2, [r3, #4]

				if(++t.date == 32)
 8002784:	4b34      	ldr	r3, [pc, #208]	; (8002858 <sw_rtc_update+0x128>)
 8002786:	88db      	ldrh	r3, [r3, #6]
 8002788:	3301      	adds	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b32      	ldr	r3, [pc, #200]	; (8002858 <sw_rtc_update+0x128>)
 800278e:	80da      	strh	r2, [r3, #6]
 8002790:	4b31      	ldr	r3, [pc, #196]	; (8002858 <sw_rtc_update+0x128>)
 8002792:	88db      	ldrh	r3, [r3, #6]
 8002794:	2b20      	cmp	r3, #32
 8002796:	d109      	bne.n	80027ac <sw_rtc_update+0x7c>
				{
					t.month++;
 8002798:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <sw_rtc_update+0x128>)
 800279a:	891b      	ldrh	r3, [r3, #8]
 800279c:	3301      	adds	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <sw_rtc_update+0x128>)
 80027a2:	811a      	strh	r2, [r3, #8]
					t.date=1;
 80027a4:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <sw_rtc_update+0x128>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	80da      	strh	r2, [r3, #6]
 80027aa:	e045      	b.n	8002838 <sw_rtc_update+0x108>
				}
				else if(t.date == 31)
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <sw_rtc_update+0x128>)
 80027ae:	88db      	ldrh	r3, [r3, #6]
 80027b0:	2b1f      	cmp	r3, #31
 80027b2:	d119      	bne.n	80027e8 <sw_rtc_update+0xb8>
				{
					if((t.month == 4) || (t.month == 6) || (t.month == 9) ||
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <sw_rtc_update+0x128>)
 80027b6:	891b      	ldrh	r3, [r3, #8]
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d00b      	beq.n	80027d4 <sw_rtc_update+0xa4>
 80027bc:	4b26      	ldr	r3, [pc, #152]	; (8002858 <sw_rtc_update+0x128>)
 80027be:	891b      	ldrh	r3, [r3, #8]
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d007      	beq.n	80027d4 <sw_rtc_update+0xa4>
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <sw_rtc_update+0x128>)
 80027c6:	891b      	ldrh	r3, [r3, #8]
 80027c8:	2b09      	cmp	r3, #9
 80027ca:	d003      	beq.n	80027d4 <sw_rtc_update+0xa4>
							(t.month == 11))
 80027cc:	4b22      	ldr	r3, [pc, #136]	; (8002858 <sw_rtc_update+0x128>)
 80027ce:	891b      	ldrh	r3, [r3, #8]
					if((t.month == 4) || (t.month == 6) || (t.month == 9) ||
 80027d0:	2b0b      	cmp	r3, #11
 80027d2:	d131      	bne.n	8002838 <sw_rtc_update+0x108>
					{
						t.month++;
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <sw_rtc_update+0x128>)
 80027d6:	891b      	ldrh	r3, [r3, #8]
 80027d8:	3301      	adds	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <sw_rtc_update+0x128>)
 80027de:	811a      	strh	r2, [r3, #8]
						t.date = 1;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <sw_rtc_update+0x128>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	80da      	strh	r2, [r3, #6]
 80027e6:	e027      	b.n	8002838 <sw_rtc_update+0x108>
					}
				}
				else if(t.date == 30)
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <sw_rtc_update+0x128>)
 80027ea:	88db      	ldrh	r3, [r3, #6]
 80027ec:	2b1e      	cmp	r3, #30
 80027ee:	d10d      	bne.n	800280c <sw_rtc_update+0xdc>
				{
					if(t.month == 2)
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <sw_rtc_update+0x128>)
 80027f2:	891b      	ldrh	r3, [r3, #8]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d11f      	bne.n	8002838 <sw_rtc_update+0x108>
					{
						t.month++;
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <sw_rtc_update+0x128>)
 80027fa:	891b      	ldrh	r3, [r3, #8]
 80027fc:	3301      	adds	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	4b15      	ldr	r3, [pc, #84]	; (8002858 <sw_rtc_update+0x128>)
 8002802:	811a      	strh	r2, [r3, #8]
						t.date = 1;
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <sw_rtc_update+0x128>)
 8002806:	2201      	movs	r2, #1
 8002808:	80da      	strh	r2, [r3, #6]
 800280a:	e015      	b.n	8002838 <sw_rtc_update+0x108>
					}
				}
				else if (t.date == 29)
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <sw_rtc_update+0x128>)
 800280e:	88db      	ldrh	r3, [r3, #6]
 8002810:	2b1d      	cmp	r3, #29
 8002812:	d111      	bne.n	8002838 <sw_rtc_update+0x108>
				{
					if((t.month == 2) && (not_leap()))
 8002814:	4b10      	ldr	r3, [pc, #64]	; (8002858 <sw_rtc_update+0x128>)
 8002816:	891b      	ldrh	r3, [r3, #8]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d10d      	bne.n	8002838 <sw_rtc_update+0x108>
 800281c:	f000 f846 	bl	80028ac <not_leap>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <sw_rtc_update+0x108>
					{
						t.month++;
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <sw_rtc_update+0x128>)
 8002828:	891b      	ldrh	r3, [r3, #8]
 800282a:	3301      	adds	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <sw_rtc_update+0x128>)
 8002830:	811a      	strh	r2, [r3, #8]
						t.date = 1;
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <sw_rtc_update+0x128>)
 8002834:	2201      	movs	r2, #1
 8002836:	80da      	strh	r2, [r3, #6]
					}
				}

				if(t.month == 13)
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <sw_rtc_update+0x128>)
 800283a:	891b      	ldrh	r3, [r3, #8]
 800283c:	2b0d      	cmp	r3, #13
 800283e:	d108      	bne.n	8002852 <sw_rtc_update+0x122>
				{
					t.month = 1;
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <sw_rtc_update+0x128>)
 8002842:	2201      	movs	r2, #1
 8002844:	811a      	strh	r2, [r3, #8]
					t.year++;
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <sw_rtc_update+0x128>)
 8002848:	895b      	ldrh	r3, [r3, #10]
 800284a:	3301      	adds	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	4b02      	ldr	r3, [pc, #8]	; (8002858 <sw_rtc_update+0x128>)
 8002850:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000030 	.word	0x20000030

0800285c <sw_rtc_gettime>:

void sw_rtc_gettime( time_t* cur_time_ptr)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	/* Check NULL pointer */
	if (cur_time_ptr == 0)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d018      	beq.n	800289c <sw_rtc_gettime+0x40>
	{
		return;
	}
	
	cur_time_ptr->second = t.second;
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <sw_rtc_gettime+0x4c>)
 800286c:	881a      	ldrh	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	801a      	strh	r2, [r3, #0]
	cur_time_ptr->minute = t.minute;
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <sw_rtc_gettime+0x4c>)
 8002874:	885a      	ldrh	r2, [r3, #2]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	805a      	strh	r2, [r3, #2]
	cur_time_ptr->hour = t.hour;
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <sw_rtc_gettime+0x4c>)
 800287c:	889a      	ldrh	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	809a      	strh	r2, [r3, #4]
	cur_time_ptr->date = t.date;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <sw_rtc_gettime+0x4c>)
 8002884:	88da      	ldrh	r2, [r3, #6]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	80da      	strh	r2, [r3, #6]
	cur_time_ptr->month = t.month;
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <sw_rtc_gettime+0x4c>)
 800288c:	891a      	ldrh	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	811a      	strh	r2, [r3, #8]
	cur_time_ptr->year = t.year;
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <sw_rtc_gettime+0x4c>)
 8002894:	895a      	ldrh	r2, [r3, #10]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	815a      	strh	r2, [r3, #10]
 800289a:	e000      	b.n	800289e <sw_rtc_gettime+0x42>
		return;
 800289c:	bf00      	nop
}
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	20000030 	.word	0x20000030

080028ac <not_leap>:
 * Check for leap year.
 *
 * \return	0 if leap year.
 */
static char not_leap(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
	if(!(t.year%100))
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <not_leap+0x50>)
 80028b2:	895b      	ldrh	r3, [r3, #10]
 80028b4:	4a12      	ldr	r2, [pc, #72]	; (8002900 <not_leap+0x54>)
 80028b6:	fba2 1203 	umull	r1, r2, r2, r3
 80028ba:	0952      	lsrs	r2, r2, #5
 80028bc:	2164      	movs	r1, #100	; 0x64
 80028be:	fb01 f202 	mul.w	r2, r1, r2
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <not_leap+0x3a>
	{
		return (char)(t.year % 400);
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <not_leap+0x50>)
 80028cc:	895b      	ldrh	r3, [r3, #10]
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <not_leap+0x54>)
 80028d0:	fba2 1203 	umull	r1, r2, r2, r3
 80028d4:	09d2      	lsrs	r2, r2, #7
 80028d6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80028da:	fb01 f202 	mul.w	r2, r1, r2
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	e005      	b.n	80028f2 <not_leap+0x46>
	}
	else
	{
		return (char)(t.year % 4);
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <not_leap+0x50>)
 80028e8:	895b      	ldrh	r3, [r3, #10]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	b2db      	uxtb	r3, r3
	}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	20000030 	.word	0x20000030
 8002900:	51eb851f 	.word	0x51eb851f

08002904 <__NVIC_SetPriority>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	db0a      	blt.n	800292e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	490c      	ldr	r1, [pc, #48]	; (8002950 <__NVIC_SetPriority+0x4c>)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	0112      	lsls	r2, r2, #4
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	440b      	add	r3, r1
 8002928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800292c:	e00a      	b.n	8002944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4908      	ldr	r1, [pc, #32]	; (8002954 <__NVIC_SetPriority+0x50>)
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	3b04      	subs	r3, #4
 800293c:	0112      	lsls	r2, r2, #4
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	440b      	add	r3, r1
 8002942:	761a      	strb	r2, [r3, #24]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000e100 	.word	0xe000e100
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <SysTick_Config>:
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002968:	d301      	bcc.n	800296e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800296a:	2301      	movs	r3, #1
 800296c:	e00f      	b.n	800298e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <SysTick_Config+0x40>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002976:	210f      	movs	r1, #15
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f7ff ffc2 	bl	8002904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SysTick_Config+0x40>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <SysTick_Config+0x40>)
 8002988:	2207      	movs	r2, #7
 800298a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	e000e010 	.word	0xe000e010

0800299c <sw_rtc_led_show_pwm>:
static uint32_t volatile msTicks = 0;                              /* Variable to store millisecond ticks */
static time_t   currTime = {0};
static uint16_t ledIndPinIdx = 0;

/* LED output indicator */
void sw_rtc_led_show_pwm (void) {
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
	uint32_t currPwmSetting = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
//	/* Calculate new duty */
//	currPwmSetting += 10;
//
//	/* Update new setting */
//	LL_TIM_OC_SetCompareCH4(currPwmSetting);
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <sw_rtc_app_run>:

/* Main software RTC implementation */
int sw_rtc_app_run (void)  {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	SysTick_Config (SystemCoreClock / 1000); /* 1mS */
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <sw_rtc_app_run+0x2c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <sw_rtc_app_run+0x30>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	099b      	lsrs	r3, r3, #6
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ffc7 	bl	8002958 <SysTick_Config>
	
  while(1)
	{
		HAL_Delay(500);
 80029ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029ce:	f7fe fb51 	bl	8001074 <HAL_Delay>
		sw_rtc_gettime( &currTime );
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <sw_rtc_app_run+0x34>)
 80029d4:	f7ff ff42 	bl	800285c <sw_rtc_gettime>
		sw_rtc_led_show_pwm();
 80029d8:	f7ff ffe0 	bl	800299c <sw_rtc_led_show_pwm>
		HAL_Delay(500);
 80029dc:	e7f5      	b.n	80029ca <sw_rtc_app_run+0x16>
 80029de:	bf00      	nop
 80029e0:	20000000 	.word	0x20000000
 80029e4:	10624dd3 	.word	0x10624dd3
 80029e8:	20000040 	.word	0x20000040

080029ec <sw_rtc_systick_update>:
	}
}

 /*  */
void sw_rtc_systick_update(void) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
    msTicks++;
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <sw_rtc_systick_update+0x28>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <sw_rtc_systick_update+0x28>)
 80029f8:	6013      	str	r3, [r2, #0]
	if (msTicks >= SW_RTC_TICK_PER_SECOND)
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <sw_rtc_systick_update+0x28>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a02:	d304      	bcc.n	8002a0e <sw_rtc_systick_update+0x22>
	{
		msTicks = 0;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <sw_rtc_systick_update+0x28>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
		sw_rtc_update();
 8002a0a:	f7ff fe91 	bl	8002730 <sw_rtc_update>
	}
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	2000003c 	.word	0x2000003c

08002a18 <__libc_init_array>:
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	4d0d      	ldr	r5, [pc, #52]	; (8002a50 <__libc_init_array+0x38>)
 8002a1c:	4c0d      	ldr	r4, [pc, #52]	; (8002a54 <__libc_init_array+0x3c>)
 8002a1e:	1b64      	subs	r4, r4, r5
 8002a20:	10a4      	asrs	r4, r4, #2
 8002a22:	2600      	movs	r6, #0
 8002a24:	42a6      	cmp	r6, r4
 8002a26:	d109      	bne.n	8002a3c <__libc_init_array+0x24>
 8002a28:	4d0b      	ldr	r5, [pc, #44]	; (8002a58 <__libc_init_array+0x40>)
 8002a2a:	4c0c      	ldr	r4, [pc, #48]	; (8002a5c <__libc_init_array+0x44>)
 8002a2c:	f000 f820 	bl	8002a70 <_init>
 8002a30:	1b64      	subs	r4, r4, r5
 8002a32:	10a4      	asrs	r4, r4, #2
 8002a34:	2600      	movs	r6, #0
 8002a36:	42a6      	cmp	r6, r4
 8002a38:	d105      	bne.n	8002a46 <__libc_init_array+0x2e>
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a40:	4798      	blx	r3
 8002a42:	3601      	adds	r6, #1
 8002a44:	e7ee      	b.n	8002a24 <__libc_init_array+0xc>
 8002a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4a:	4798      	blx	r3
 8002a4c:	3601      	adds	r6, #1
 8002a4e:	e7f2      	b.n	8002a36 <__libc_init_array+0x1e>
 8002a50:	08002ab0 	.word	0x08002ab0
 8002a54:	08002ab0 	.word	0x08002ab0
 8002a58:	08002ab0 	.word	0x08002ab0
 8002a5c:	08002ab4 	.word	0x08002ab4

08002a60 <memset>:
 8002a60:	4402      	add	r2, r0
 8002a62:	4603      	mov	r3, r0
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d100      	bne.n	8002a6a <memset+0xa>
 8002a68:	4770      	bx	lr
 8002a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a6e:	e7f9      	b.n	8002a64 <memset+0x4>

08002a70 <_init>:
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	bf00      	nop
 8002a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a76:	bc08      	pop	{r3}
 8002a78:	469e      	mov	lr, r3
 8002a7a:	4770      	bx	lr

08002a7c <_fini>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	bf00      	nop
 8002a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a82:	bc08      	pop	{r3}
 8002a84:	469e      	mov	lr, r3
 8002a86:	4770      	bx	lr
